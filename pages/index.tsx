// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { PageParamsProvider as PageParamsProvider__ } from "@plasmicapp/react-web/lib/host";

import { PlasmicHomepage } from "../components/plasmic/escape_room/PlasmicHomepage";
import { useRouter } from "next/router";


// UNCOMMENT BELOW TO ENABLE TESTING INTERFACE
// import { saveFinalScoreToGoogleSheets, getAllScoresFromGoogleSheets } from "../core/services/sheets-backend";
// import { saveQuestionResult, getQuestionResult, getTotalScore } from "../core/services/exam";

// interface ScoreEntry {
//   timestamp: string;
//   name: string;
//   score: number;
// }

// interface QuestionResult {
//   attempt_number: number;
//   score: number;
//   timestamp: string;
// }

function Homepage() {
  // const [testName, setTestName] = React.useState('Test User');
  // const [testScore, setTestScore] = React.useState(85);
  // const [scores, setScores] = React.useState<ScoreEntry[]>([]);
  // const [message, setMessage] = React.useState('');
  // const [questionName, setQuestionName] = React.useState('question1');
  // const [attemptNumber, setAttemptNumber] = React.useState(1);
  // const [questionScore, setQuestionScore] = React.useState(10);
  // const [questionResult, setQuestionResult] = React.useState<QuestionResult | null>(null);
  // const [totalScore, setTotalScore] = React.useState(0);

  // // Test Sheets Backend Functions
  // const handleSaveScore = async () => {
  //   try {
  //     setMessage('Saving score...');
  //     await saveFinalScoreToGoogleSheets(testName, testScore);
  //     setMessage('Score saved successfully!');
  //   } catch (error) {
  //     setMessage(`Error saving score: ${error instanceof Error ? error.message : 'Unknown error'}`);
  //   }
  // };

  // const handleGetScores = async () => {
  //   try {
  //     setMessage('Fetching scores...');
  //     const allScores = await getAllScoresFromGoogleSheets();
  //     setScores(allScores);
  //     setMessage(`Retrieved ${allScores.length} scores`);
  //   } catch (error) {
  //     setMessage(`Error fetching scores: ${error instanceof Error ? error.message : 'Unknown error'}`);
  //   }
  // };

  // // Test Exam Functions
  // const handleSaveQuestion = () => {
  //   saveQuestionResult(questionName, attemptNumber, questionScore);
  //   setMessage(`Question result saved for ${questionName}`);
  //   updateTotalScore();
  // };

  // const handleGetQuestion = () => {
  //   const result = getQuestionResult(questionName);
  //   setQuestionResult(result);
  //   setMessage(result ? 'Question result found' : 'No result found for this question');
  // };

  // const updateTotalScore = () => {
  //   const total = getTotalScore();
  //   setTotalScore(total);
  // };

  // React.useEffect(() => {
  //   updateTotalScore();
  // }, []);

  return (
    <PageParamsProvider__
      route={useRouter()?.pathname}
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <PlasmicHomepage />
      
      {/* Test Interface 
      <div style={{ padding: '20px', backgroundColor: '#f5f5f5', margin: '20px', borderRadius: '8px', color: 'black' }}>
        <h2 style={{ color: 'black' }}>Service Testing Interface</h2>
        

        {message && (
          <div style={{ 
            padding: '10px', 
            backgroundColor: message.includes('Error') ? '#ffebee' : '#e8f5e8', 
            border: `1px solid ${message.includes('Error') ? '#f44336' : '#4caf50'}`,
            borderRadius: '4px',
            marginBottom: '20px',
            color: 'black'
          }}>
            {message}
          </div>
        )}


        <div style={{ marginBottom: '30px', padding: '15px', border: '1px solid #ddd', borderRadius: '4px' }}>
          <h3>Google Sheets Backend Tests</h3>
          
          <div style={{ marginBottom: '15px' }}>
            <label>Name: </label>
            <input 
              type="text" 
              value={testName} 
              onChange={(e) => setTestName(e.target.value)}
              style={{ marginLeft: '10px', padding: '5px' }}
            />
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label>Score: </label>
            <input 
              type="number" 
              value={testScore} 
              onChange={(e) => setTestScore(Number(e.target.value))}
              style={{ marginLeft: '10px', padding: '5px' }}
            />
          </div>
          
          <button onClick={handleSaveScore} style={{ marginRight: '10px', padding: '8px 16px' }}>
            Save Score to Sheets
          </button>
          
          <button onClick={handleGetScores} style={{ padding: '8px 16px' }}>
            Get All Scores
          </button>
          
          {scores.length > 0 && (
            <div style={{ marginTop: '15px' }}>
              <h4>Retrieved Scores:</h4>
              <pre style={{ backgroundColor: 'white', padding: '10px', overflow: 'auto', maxHeight: '200px' }}>
                {JSON.stringify(scores, null, 2)}
              </pre>
            </div>
          )}
        </div>

        <div style={{ padding: '15px', border: '1px solid #ddd', borderRadius: '4px' }}>
          <h3>Exam Service Tests</h3>
          
          <div style={{ marginBottom: '15px' }}>
            <label>Question Name: </label>
            <input 
              type="text" 
              value={questionName} 
              onChange={(e) => setQuestionName(e.target.value)}
              style={{ marginLeft: '10px', padding: '5px' }}
            />
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label>Attempt Number: </label>
            <input 
              type="number" 
              value={attemptNumber} 
              onChange={(e) => setAttemptNumber(Number(e.target.value))}
              style={{ marginLeft: '10px', padding: '5px' }}
            />
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label>Question Score: </label>
            <input 
              type="number" 
              value={questionScore} 
              onChange={(e) => setQuestionScore(Number(e.target.value))}
              style={{ marginLeft: '10px', padding: '5px' }}
            />
          </div>
          
          <button onClick={handleSaveQuestion} style={{ marginRight: '10px', padding: '8px 16px' }}>
            Save Question Result
          </button>
          
          <button onClick={handleGetQuestion} style={{ marginRight: '10px', padding: '8px 16px' }}>
            Get Question Result
          </button>
          
          <button onClick={updateTotalScore} style={{ padding: '8px 16px' }}>
            Update Total Score
          </button>
          
          <div style={{ marginTop: '15px' }}>
            <h4>Total Score: {totalScore}</h4>
          </div>
          
          {questionResult && (
            <div style={{ marginTop: '15px' }}>
              <h4>Question Result:</h4>
              <pre style={{ backgroundColor: 'white', padding: '10px' }}>
                {JSON.stringify(questionResult, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
      */}
    </PageParamsProvider__>
  );
}

export default Homepage;
