// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicQuestionModal,
  DefaultQuestionModalProps
} from "./plasmic/escape_room/PlasmicQuestionModal";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { saveQuestionResult, getQuestionResult } from "../core/services/exam";


export interface QuestionModalProps extends DefaultQuestionModalProps {}

function QuestionModal_(
  props: QuestionModalProps,
  ref: HTMLElementRefOf<"div">
) {
  const [selectedOption, setSelectedOption] = React.useState<string | null>(null);
const [selectedWager, setSelectedWager] = React.useState<number | null>(null);

  const handleSubmit = () => {
    let score = 0;
    console.log("Selected option:", selectedOption);
    console.log("Submitting answer...", props);
    // Add your submit logic here
    if (selectedOption && props.questionId) {
      if(props.design == 'finalOne' && !selectedWager){
        alert('Please select your confidence level before submitting.');
      }
        

      const result:any = getQuestionResult(props.questionId);
      if (result && result.isCorrect) {
        alert('You have already answered this question correctly.');
      }else{
      if (!result && selectedOption === props.correctAnswer) {
         //if final question and correct and first attempt, give score based on wager
        if(props.design == 'finalOne' && selectedWager){
          score = selectedWager;
        }else{
          score = 10;
        }
      }else if (result && result.attempt_number && props.design == 'finalOne' && selectedWager) {
        score = -selectedWager;
      }
     
      saveQuestionResult(props.questionId, result?.attempt_number ? result.attempt_number + 1 : 1, score, selectedOption === props.correctAnswer);
      }
      

    }else{
      alert('Please select an option before submitting.');
    }
  }
  console.log("Rendering QuestionModal with questionId:", props);

  return <PlasmicQuestionModal root={{ ref }} {...props}
  
    a={{
      props: {
        onClick: (e) => {
          setSelectedOption('A');
        }
      }
    }}
    b={{
      props: {
        onClick: (e) => {
          setSelectedOption('B');
        }
      }
    }}
    c={{
      props: {
        onClick: (e) => {
          setSelectedOption('C');
        }
      }
    }}
    d={{
      props: {
        onClick: (e) => {
          setSelectedOption('D');
        }
      } 
    }}

        a2={{
      props: {
        onClick: (e) => {
          setSelectedOption('A');
        }
      }
    }}
    b2={{
      props: {
        onClick: (e) => {
          setSelectedOption('B');
        }
      }
    }}
    c2={{
      props: {
        onClick: (e) => {
          setSelectedOption('C');
        }
      }
    }}
    d2={{
      props: {
        onClick: (e) => {
          setSelectedOption('D');
        }
      } 
    }}
    submit={{
    props: {
      
      onClick: (e) => {
        handleSubmit();
      }
      
    }
  }}
  lessConfident={{
    props: {
              onClick: () => {
          setSelectedWager(3);
        }
    }
  }}
  confident={{
    props: {
      onClick: () => {
        setSelectedWager(7);
      }
    }
  }}
  veryConfident={{
    props: {
      onClick: () => {
        setSelectedWager(10);
      }
    }
  }}


      submit2={{
    props: {
      
      onClick: (e) => {
        handleSubmit();
      }
      
    }
  }}
  />;
}

const QuestionModal = React.forwardRef(QuestionModal_);
export default QuestionModal;
