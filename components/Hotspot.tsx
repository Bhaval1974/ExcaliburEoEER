// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicHotspot,
  DefaultHotspotProps
} from "./plasmic/escape_room/PlasmicHotspot";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { getQuestionResult } from "@/core/services/exam";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface HotspotProps extends Omit<DefaultHotspotProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultHotspotProps altogether and have
// total control over the props for your component.
export interface HotspotProps extends DefaultHotspotProps {}

function Hotspot_(props: HotspotProps, ref: HTMLElementRefOf<"div">) {

  const [completed, setCompleted] = React.useState<boolean>(false);
  const [locked, setLocked] = React.useState<boolean>(false);

      React.useEffect(() => {
        
          const updateLocked = () => {
            if (props?.questionId === 'kelvin-final') {
            const KelvinPCPQ4 = getQuestionResult("Kelvin-PCP-q4");
            const KelvinPCPQ1 = getQuestionResult("Kelvin-PCP-q1");
            const KelvinPCPQ2 = getQuestionResult("Kelvin-PCP-q2");
            const KelvinPCPQ3 = getQuestionResult("Kelvin-PCP-q3");
            if (KelvinPCPQ1 && KelvinPCPQ2 && KelvinPCPQ3 && KelvinPCPQ4 &&
              KelvinPCPQ1.isCorrect && KelvinPCPQ2.isCorrect && KelvinPCPQ3.isCorrect && KelvinPCPQ4.isCorrect) {
              setLocked(false);
            } else {
              setLocked(true);
            }
          }else if (props?.questionId === 'sharese-final'){
            const SharesePCPQ4 = getQuestionResult("Sharese-PCP-q4");
            const SharesePCPQ1 = getQuestionResult("Sharese-PCP-q1");
            const SharesePCPQ2 = getQuestionResult("Sharese-PCP-q2");

            const SharesePCPQ3 = getQuestionResult("Sharese-PCP-q3");
            if (SharesePCPQ1 && SharesePCPQ2 && SharesePCPQ3 && SharesePCPQ4 &&
              SharesePCPQ1.isCorrect && SharesePCPQ2.isCorrect && SharesePCPQ3.isCorrect && SharesePCPQ4.isCorrect) {
              setLocked(false);
            } else {
              setLocked(true);
            }

          }else if (props?.questionId === 'ivan-final'){
            const IvanPCPQ4 = getQuestionResult("Ivan-PCP-q4");
            const IvanPCPQ1 = getQuestionResult("Ivan-PCP-q1");
            const IvanPCPQ2 = getQuestionResult("Ivan-PCP-q2");
            const IvanPCPQ3 = getQuestionResult("Ivan-PCP-q3");
            if (IvanPCPQ1 && IvanPCPQ2 && IvanPCPQ3 && IvanPCPQ4 &&
              IvanPCPQ1.isCorrect && IvanPCPQ2.isCorrect && IvanPCPQ3.isCorrect && IvanPCPQ4.isCorrect) {
              setLocked(false);
            } else {
              setLocked(true);
            }
          }

          }
          updateLocked();

                // Listen for localStorage changes
      window.addEventListener('storage', updateLocked);
  
      return () => {
        window.removeEventListener('storage', updateLocked);
      };
        
    }, []);

    React.useEffect(() => {
      const updateCompleted = () => {
        
        if (props?.questionId) {
          const question = props.questionId.trim();
          console.log("Checking completion for questionId:", question);
        const result = getQuestionResult(question);
        console.log("Question result:", result);
        setCompleted(result ? result.isCorrect : false);
        }
      };
  
      // Initial load
      updateCompleted();
  
      // Listen for localStorage changes
      window.addEventListener('storage', updateCompleted);
  
      return () => {
        window.removeEventListener('storage', updateCompleted);
      };
    }, []);

  return <PlasmicHotspot root={{ ref }} {...props} completed={completed} locked={locked}
  />;
}

const Hotspot = React.forwardRef(Hotspot_);
export default Hotspot;
