/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: AxrUA-GaPp8F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicAnswerButton.module.css"; // plasmic-import: AxrUA-GaPp8F/css

createPlasmicElementProxy;

export type PlasmicAnswerButton__VariantMembers = {
  selected: "selected";
  answerState: "correct" | "incorrect";
  style2: "final";
};
export type PlasmicAnswerButton__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  answerState?: SingleChoiceArg<"correct" | "incorrect">;
  style2?: SingleChoiceArg<"final">;
};
type VariantPropType = keyof PlasmicAnswerButton__VariantsArgs;
export const PlasmicAnswerButton__VariantProps = new Array<VariantPropType>(
  "selected",
  "answerState",
  "style2"
);

export type PlasmicAnswerButton__ArgsType = {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAnswerButton__ArgsType;
export const PlasmicAnswerButton__ArgProps = new Array<ArgPropType>(
  "onClick",
  "children",
  "slot"
);

export type PlasmicAnswerButton__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultAnswerButtonProps {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  answerState?: SingleChoiceArg<"correct" | "incorrect">;
  style2?: SingleChoiceArg<"final">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnswerButton__RenderFunc(props: {
  variants: PlasmicAnswerButton__VariantsArgs;
  args: PlasmicAnswerButton__ArgsType;
  overrides: PlasmicAnswerButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      },
      {
        path: "answerState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.answerState
      },
      {
        path: "style2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.style2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootanswerState_correct]: hasVariant(
            $state,
            "answerState",
            "correct"
          ),
          [sty.rootanswerState_incorrect]: hasVariant(
            $state,
            "answerState",
            "incorrect"
          ),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.rootstyle2_final]: hasVariant($state, "style2", "final"),
          [sty.rootstyle2_final_selected]:
            hasVariant($state, "style2", "final") &&
            hasVariant($state, "selected", "selected")
        }
      )}
      onClick={args.onClick}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__tFjs, {
          [sty.freeBoxanswerState_correct__tFjSsJ5F]: hasVariant(
            $state,
            "answerState",
            "correct"
          ),
          [sty.freeBoxanswerState_incorrect__tFjs2DjXg]: hasVariant(
            $state,
            "answerState",
            "incorrect"
          ),
          [sty.freeBoxselected__tFjsIfe6D]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
          [sty.freeBoxstyle2_final__tFjs45Lf]: hasVariant(
            $state,
            "style2",
            "final"
          ),
          [sty.freeBoxstyle2_final_selected__tFjs45LfIfe6D]:
            hasVariant($state, "style2", "final") &&
            hasVariant($state, "selected", "selected")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__fE6X, {
            [sty.freeBoxanswerState_correct__fE6XsJ5F]: hasVariant(
              $state,
              "answerState",
              "correct"
            ),
            [sty.freeBoxanswerState_incorrect__fE6X2DjXg]: hasVariant(
              $state,
              "answerState",
              "incorrect"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uIxQq)}>
            {renderPlasmicSlot({
              defaultContents: "A",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenanswerState_correct]: hasVariant(
                  $state,
                  "answerState",
                  "correct"
                ),
                [sty.slotTargetChildrenanswerState_incorrect]: hasVariant(
                  $state,
                  "answerState",
                  "incorrect"
                )
              })
            })}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__djHnV, {
          [sty.freeBoxanswerState_correct__djHnVsJ5F]: hasVariant(
            $state,
            "answerState",
            "correct"
          ),
          [sty.freeBoxanswerState_incorrect__djHnV2DjXg]: hasVariant(
            $state,
            "answerState",
            "incorrect"
          ),
          [sty.freeBoxselected__djHnVIfe6D]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
          [sty.freeBoxstyle2_final__djHnV45Lf]: hasVariant(
            $state,
            "style2",
            "final"
          ),
          [sty.freeBoxstyle2_final_selected__djHnV45LfIfe6D]:
            hasVariant($state, "style2", "final") &&
            hasVariant($state, "selected", "selected")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__th5Kh, {
            [sty.freeBoxselected__th5KhIfe6D]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__vgE1O, {
              [sty.freeBoxselected__vgE1OIfe6D]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot,
              className: classNames(sty.slotTargetSlot, {
                [sty.slotTargetSlotanswerState_correct]: hasVariant(
                  $state,
                  "answerState",
                  "correct"
                ),
                [sty.slotTargetSlotanswerState_incorrect]: hasVariant(
                  $state,
                  "answerState",
                  "incorrect"
                ),
                [sty.slotTargetSlotselected]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                ),
                [sty.slotTargetSlotstyle2_final]: hasVariant(
                  $state,
                  "style2",
                  "final"
                )
              })
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnswerButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnswerButton__VariantsArgs;
    args?: PlasmicAnswerButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAnswerButton__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAnswerButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnswerButton__ArgProps,
          internalVariantPropNames: PlasmicAnswerButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnswerButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnswerButton";
  } else {
    func.displayName = `PlasmicAnswerButton.${nodeName}`;
  }
  return func;
}

export const PlasmicAnswerButton = Object.assign(
  // Top-level PlasmicAnswerButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAnswerButton
    internalVariantProps: PlasmicAnswerButton__VariantProps,
    internalArgProps: PlasmicAnswerButton__ArgProps
  }
);

export default PlasmicAnswerButton;
/* prettier-ignore-end */
