/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: AHLWtbHHbn2R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicClueTab.module.css"; // plasmic-import: AHLWtbHHbn2R/css

createPlasmicElementProxy;

export type PlasmicClueTab__VariantMembers = {
  active: "active";
  hasText: "yes";
};
export type PlasmicClueTab__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  hasText?: SingleChoiceArg<"yes">;
};
type VariantPropType = keyof PlasmicClueTab__VariantsArgs;
export const PlasmicClueTab__VariantProps = new Array<VariantPropType>(
  "active",
  "hasText"
);

export type PlasmicClueTab__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicClueTab__ArgsType;
export const PlasmicClueTab__ArgProps = new Array<ArgPropType>("children");

export type PlasmicClueTab__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultClueTabProps {
  children?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  hasText?: SingleChoiceArg<"yes">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClueTab__RenderFunc(props: {
  variants: PlasmicClueTab__VariantsArgs;
  args: PlasmicClueTab__ArgsType;
  overrides: PlasmicClueTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "hasText",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasText
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.roothasText_yes]: hasVariant($state, "hasText", "yes"),
          [sty.roothasText_yes_active]:
            hasVariant($state, "hasText", "yes") &&
            hasVariant($state, "active", "active")
        }
      )}
    >
      {(hasVariant($state, "hasText", "yes") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__tgDmG, {
            [sty.freeBoxactive__tgDmGnT3CS]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxhasText_yes__tgDmGysFeQ]: hasVariant(
              $state,
              "hasText",
              "yes"
            ),
            [sty.freeBoxhasText_yes_active__tgDmGysFeQNT3CS]:
              hasVariant($state, "hasText", "yes") &&
              hasVariant($state, "active", "active")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ownls,
              {
                [sty.textactive__ownlsnT3CS]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.texthasText_yes__ownlsYsFeQ]: hasVariant(
                  $state,
                  "hasText",
                  "yes"
                ),
                [sty.texthasText_yes_active__ownlsYsFeQNT3CS]:
                  hasVariant($state, "hasText", "yes") &&
                  hasVariant($state, "active", "active")
              }
            )}
          >
            {"click to view"}
          </div>
        </div>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__i2IU, {
          [sty.freeBoxactive__i2IUnT3CS]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxhasText_yes__i2IUysFeQ]: hasVariant(
            $state,
            "hasText",
            "yes"
          ),
          [sty.freeBoxhasText_yes_active__i2IUysFeQNT3CS]:
            hasVariant($state, "hasText", "yes") &&
            hasVariant($state, "active", "active")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__tqiOo, {
            [sty.freeBoxhasText_yes__tqiOoYsFeQ]: hasVariant(
              $state,
              "hasText",
              "yes"
            ),
            [sty.freeBoxhasText_yes_active__tqiOoYsFeQNT3CS]:
              hasVariant($state, "hasText", "yes") &&
              hasVariant($state, "active", "active")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xf5Iw,
              {
                [sty.texthasText_yes__xf5IwYsFeQ]: hasVariant(
                  $state,
                  "hasText",
                  "yes"
                )
              }
            )}
          >
            {"You are here"}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__mhXz8, {
              [sty.freeBoxhasText_yes_active__mhXz8YsFeQNT3CS]:
                hasVariant($state, "hasText", "yes") &&
                hasVariant($state, "active", "active")
            })}
          >
            {(
              hasVariant($state, "hasText", "yes") &&
              hasVariant($state, "active", "active")
                ? true
                : hasVariant($state, "hasText", "yes")
                  ? true
                  : false
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fGgS3,
                  {
                    [sty.texthasText_yes__fGgS3YsFeQ]: hasVariant(
                      $state,
                      "hasText",
                      "yes"
                    ),
                    [sty.texthasText_yes_active__fGgS3YsFeQNT3CS]:
                      hasVariant($state, "hasText", "yes") &&
                      hasVariant($state, "active", "active")
                  }
                )}
              >
                {hasVariant($state, "hasText", "yes") &&
                hasVariant($state, "active", "active")
                  ? "you are here"
                  : "click to view"}
              </div>
            ) : null}
            {renderPlasmicSlot({
              defaultContents: "CMP",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenactive]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.slotTargetChildrenhasText_yes_active]:
                  hasVariant($state, "hasText", "yes") &&
                  hasVariant($state, "active", "active")
              })
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClueTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClueTab__VariantsArgs;
    args?: PlasmicClueTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicClueTab__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicClueTab__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClueTab__ArgProps,
          internalVariantPropNames: PlasmicClueTab__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClueTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClueTab";
  } else {
    func.displayName = `PlasmicClueTab.${nodeName}`;
  }
  return func;
}

export const PlasmicClueTab = Object.assign(
  // Top-level PlasmicClueTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicClueTab
    internalVariantProps: PlasmicClueTab__VariantProps,
    internalArgProps: PlasmicClueTab__ArgProps
  }
);

export default PlasmicClueTab;
/* prettier-ignore-end */
