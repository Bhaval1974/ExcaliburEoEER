/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: JILRAOi2j9ok

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AnswerButton from "../../AnswerButton"; // plasmic-import: AxrUA-GaPp8F/component
import InfographEdButton from "../../InfographEdButton"; // plasmic-import: TjjevRS570P0/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicPreActivity.module.css"; // plasmic-import: JILRAOi2j9ok/css

createPlasmicElementProxy;

export type PlasmicPreActivity__VariantMembers = {};
export type PlasmicPreActivity__VariantsArgs = {};
type VariantPropType = keyof PlasmicPreActivity__VariantsArgs;
export const PlasmicPreActivity__VariantProps = new Array<VariantPropType>();

export type PlasmicPreActivity__ArgsType = {};
type ArgPropType = keyof PlasmicPreActivity__ArgsType;
export const PlasmicPreActivity__ArgProps = new Array<ArgPropType>();

export type PlasmicPreActivity__OverridesType = {
  root?: Flex__<"div">;
  textInput?: Flex__<"input">;
  infographEdButton?: Flex__<typeof InfographEdButton>;
  textbox?: Flex__<"input">;
};

export interface DefaultPreActivityProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPreActivity__RenderFunc(props: {
  variants: PlasmicPreActivity__VariantsArgs;
  args: PlasmicPreActivity__ArgsType;
  overrides: PlasmicPreActivity__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__lt7In)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dBb9B
              )}
            >
              {"Pre-Activity Question\r"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fRdj
              )}
            >
              {
                "Please give us some background information before beginning this activity.\r"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kptht
              )}
            >
              {"What is your specialty?\r"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pF0Zk
              )}
            >
              {"SELECT THE BEST ANSWER FROM THE OPTIONS BELOW\r"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__na2XZ)}>
              <AnswerButton
                className={classNames(
                  "__wab_instance",
                  sty.answerButton__gjNd1
                )}
                slot={"Gastroenterologist"}
                style2={"final"}
              />

              <AnswerButton
                className={classNames(
                  "__wab_instance",
                  sty.answerButton__ysxmX
                )}
                slot={"Primary Care Physician (PCP)"}
                style2={"final"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6Pkdm)}>
              <AnswerButton
                className={classNames(
                  "__wab_instance",
                  sty.answerButton___7WrBo
                )}
                slot={"Placeholder"}
                style2={"final"}
              >
                {"C"}
              </AnswerButton>
              <AnswerButton
                className={classNames(
                  "__wab_instance",
                  sty.answerButton__nnTRv
                )}
                slot={"Placeholder"}
                style2={"final"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6QdEr
                  )}
                >
                  {"D"}
                </div>
              </AnswerButton>
            </div>
            <AnswerButton
              className={classNames("__wab_instance", sty.answerButton__hNZji)}
              slot={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oTi9X
                    )}
                  >
                    {"Other (Please specify):"}
                  </div>
                  <input
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={
                      overrides.textInput ?? overrides.textbox
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput
                    )}
                    placeholder={"Enter your specialty here"}
                    type={"text"}
                  />
                </React.Fragment>
              }
              style2={"final"}
            >
              {"E"}
            </AnswerButton>
            <InfographEdButton
              data-plasmic-name={"infographEdButton"}
              data-plasmic-override={overrides.infographEdButton}
              className={classNames("__wab_instance", sty.infographEdButton)}
              onClick={async event => {
                const $steps = {};

                $steps["goToTutorial"] = true
                  ? (() => {
                      const actionArgs = { destination: `/tutorial` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTutorial"] != null &&
                  typeof $steps["goToTutorial"] === "object" &&
                  typeof $steps["goToTutorial"].then === "function"
                ) {
                  $steps["goToTutorial"] = await $steps["goToTutorial"];
                }
              }}
              onClickSubmit={async event => {
                const $steps = {};
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "infographEdButton"],
  textInput: ["textInput", "textbox"],
  infographEdButton: ["infographEdButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: "input";
  infographEdButton: typeof InfographEdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPreActivity__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPreActivity__VariantsArgs;
    args?: PlasmicPreActivity__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicPreActivity__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicPreActivity__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPreActivity__ArgProps,
          internalVariantPropNames: PlasmicPreActivity__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPreActivity__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPreActivity";
  } else {
    func.displayName = `PlasmicPreActivity.${nodeName}`;
  }
  return func;
}

export const PlasmicPreActivity = Object.assign(
  // Top-level PlasmicPreActivity renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    infographEdButton: makeNodeComponent("infographEdButton"),

    // Metadata about props expected for PlasmicPreActivity
    internalVariantProps: PlasmicPreActivity__VariantProps,
    internalArgProps: PlasmicPreActivity__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPreActivity;
/* prettier-ignore-end */
