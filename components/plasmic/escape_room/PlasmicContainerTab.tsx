/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: ppx8EZHvc7Bt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicContainerTab.module.css"; // plasmic-import: ppx8EZHvc7Bt/css

createPlasmicElementProxy;

export type PlasmicContainerTab__VariantMembers = {
  active: "active";
  color: "gray";
};
export type PlasmicContainerTab__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  color?: SingleChoiceArg<"gray">;
};
type VariantPropType = keyof PlasmicContainerTab__VariantsArgs;
export const PlasmicContainerTab__VariantProps = new Array<VariantPropType>(
  "active",
  "color"
);

export type PlasmicContainerTab__ArgsType = {
  children4?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicContainerTab__ArgsType;
export const PlasmicContainerTab__ArgProps = new Array<ArgPropType>(
  "children4",
  "children"
);

export type PlasmicContainerTab__OverridesType = {
  root?: Flex__<"div">;
  baseButtonWrapper?: Flex__<"div">;
  activeButtonWrapper?: Flex__<"div">;
};

export interface DefaultContainerTabProps {
  children4?: React.ReactNode;
  children?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  color?: SingleChoiceArg<"gray">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContainerTab__RenderFunc(props: {
  variants: PlasmicContainerTab__VariantsArgs;
  args: PlasmicContainerTab__ArgsType;
  overrides: PlasmicContainerTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.rootcolor_gray]: hasVariant($state, "color", "gray")
        }
      )}
    >
      <div
        data-plasmic-name={"baseButtonWrapper"}
        data-plasmic-override={overrides.baseButtonWrapper}
        className={classNames(projectcss.all, sty.baseButtonWrapper, {
          [sty.baseButtonWrapperactive]: hasVariant($state, "active", "active")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uQdnS
          )}
        >
          {"CLICK TO VIEW"}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__wvapS, {
            [sty.freeBoxactive__wvapSdl3D]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxcolor_gray__wvapSfUbxi]: hasVariant(
              $state,
              "color",
              "gray"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___07Nrh)}>
            <div
              className={classNames(projectcss.all, sty.freeBox___0XvL, {
                [sty.freeBoxactive___0XvLDl3D]: hasVariant(
                  $state,
                  "active",
                  "active"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Physical Examination",
                value: args.children4,
                className: classNames(sty.slotTargetChildren4, {
                  [sty.slotTargetChildren4active]: hasVariant(
                    $state,
                    "active",
                    "active"
                  )
                })
              })}
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"activeButtonWrapper"}
        data-plasmic-override={overrides.activeButtonWrapper}
        className={classNames(projectcss.all, sty.activeButtonWrapper, {
          [sty.activeButtonWrapperactive]: hasVariant(
            $state,
            "active",
            "active"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__arKmn)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hY6W
            )}
          >
            {"YOU ARE HERE"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vEy8N)}>
            {renderPlasmicSlot({
              defaultContents: "Physical Examination",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenactive]: hasVariant(
                  $state,
                  "active",
                  "active"
                )
              })
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "baseButtonWrapper", "activeButtonWrapper"],
  baseButtonWrapper: ["baseButtonWrapper"],
  activeButtonWrapper: ["activeButtonWrapper"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  baseButtonWrapper: "div";
  activeButtonWrapper: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContainerTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContainerTab__VariantsArgs;
    args?: PlasmicContainerTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicContainerTab__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicContainerTab__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContainerTab__ArgProps,
          internalVariantPropNames: PlasmicContainerTab__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContainerTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContainerTab";
  } else {
    func.displayName = `PlasmicContainerTab.${nodeName}`;
  }
  return func;
}

export const PlasmicContainerTab = Object.assign(
  // Top-level PlasmicContainerTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    baseButtonWrapper: makeNodeComponent("baseButtonWrapper"),
    activeButtonWrapper: makeNodeComponent("activeButtonWrapper"),

    // Metadata about props expected for PlasmicContainerTab
    internalVariantProps: PlasmicContainerTab__VariantProps,
    internalArgProps: PlasmicContainerTab__ArgProps
  }
);

export default PlasmicContainerTab;
/* prettier-ignore-end */
