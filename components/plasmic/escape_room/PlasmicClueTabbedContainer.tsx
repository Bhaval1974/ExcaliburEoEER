/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: M2HdJEYFli90

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ContainerTab from "../../ContainerTab"; // plasmic-import: ppx8EZHvc7Bt/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicClueTabbedContainer.module.css"; // plasmic-import: M2HdJEYFli90/css

createPlasmicElementProxy;

export type PlasmicClueTabbedContainer__VariantMembers = {
  tab: "two";
};
export type PlasmicClueTabbedContainer__VariantsArgs = {
  tab?: SingleChoiceArg<"two">;
};
type VariantPropType = keyof PlasmicClueTabbedContainer__VariantsArgs;
export const PlasmicClueTabbedContainer__VariantProps =
  new Array<VariantPropType>("tab");

export type PlasmicClueTabbedContainer__ArgsType = {
  image?: React.ReactNode;
  name?: React.ReactNode;
  dob?: React.ReactNode;
  sex?: React.ReactNode;
  children?: React.ReactNode;
  tab2Image?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicClueTabbedContainer__ArgsType;
export const PlasmicClueTabbedContainer__ArgProps = new Array<ArgPropType>(
  "image",
  "name",
  "dob",
  "sex",
  "children",
  "tab2Image",
  "children2"
);

export type PlasmicClueTabbedContainer__OverridesType = {
  tabWrapper?: Flex__<"div">;
  tab1?: Flex__<"div">;
  scrollContainer?: Flex__<"div">;
  tab2?: Flex__<"div">;
  scrollContainer2?: Flex__<"div">;
};

export interface DefaultClueTabbedContainerProps {
  image?: React.ReactNode;
  name?: React.ReactNode;
  dob?: React.ReactNode;
  sex?: React.ReactNode;
  children?: React.ReactNode;
  tab2Image?: React.ReactNode;
  children2?: React.ReactNode;
  tab?: SingleChoiceArg<"two">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClueTabbedContainer__RenderFunc(props: {
  variants: PlasmicClueTabbedContainer__VariantsArgs;
  args: PlasmicClueTabbedContainer__ArgsType;
  overrides: PlasmicClueTabbedContainer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tab",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tab
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"tabWrapper"}
      data-plasmic-override={overrides.tabWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.tabWrapper,
        { [sty.tabWrappertab_two]: hasVariant($state, "tab", "two") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__eev9P, {
          [sty.freeBoxtab_two__eev9PAqIkb]: hasVariant($state, "tab", "two")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__dqTc1)}>
          <div className={classNames(projectcss.all, sty.freeBox__ebUw)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__bagI)}
              onClick={async event => {
                const $steps = {};

                $steps["updateTab"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "tab",
                        operation: 1,
                        value: "two"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTab"] != null &&
                  typeof $steps["updateTab"] === "object" &&
                  typeof $steps["updateTab"].then === "function"
                ) {
                  $steps["updateTab"] = await $steps["updateTab"];
                }
              }}
            >
              <ContainerTab
                active={hasVariant($state, "tab", "two") ? undefined : true}
                className={classNames(
                  "__wab_instance",
                  sty.containerTab__sgFhn,
                  {
                    [sty.containerTabtab_two__sgFhnAqIkb]: hasVariant(
                      $state,
                      "tab",
                      "two"
                    )
                  }
                )}
                color={hasVariant($state, "tab", "two") ? "gray" : undefined}
              >
                {"Patient Information"}
              </ContainerTab>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__h4T6U, {
                [sty.freeBoxtab_two__h4T6UAqIkb]: hasVariant(
                  $state,
                  "tab",
                  "two"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateTab"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "tab",
                        operation: 0,
                        value: "two"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTab"] != null &&
                  typeof $steps["updateTab"] === "object" &&
                  typeof $steps["updateTab"].then === "function"
                ) {
                  $steps["updateTab"] = await $steps["updateTab"];
                }
              }}
            >
              <ContainerTab
                active={hasVariant($state, "tab", "two") ? true : undefined}
                className={classNames(
                  "__wab_instance",
                  sty.containerTab__lqeAu,
                  {
                    [sty.containerTabtab_two__lqeAuaqIkb]: hasVariant(
                      $state,
                      "tab",
                      "two"
                    )
                  }
                )}
              />
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"tab1"}
        data-plasmic-override={overrides.tab1}
        className={classNames(projectcss.all, sty.tab1, {
          [sty.tab1tab_two]: hasVariant($state, "tab", "two")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__guZoM)}>
          <div className={classNames(projectcss.all, sty.freeBox__zVB1)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fXnvf)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                />
              ),

              value: args.image
            })}
            <div className={classNames(projectcss.all, sty.columns__yAcUh)}>
              <div className={classNames(projectcss.all, sty.column__kNEjx)}>
                <div className={classNames(projectcss.all, sty.freeBox__ugCqt)}>
                  {renderPlasmicSlot({
                    defaultContents: "Kelvin Thompson",
                    value: args.name,
                    className: classNames(sty.slotTargetName)
                  })}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__pNWiE)}>
              <div className={classNames(projectcss.all, sty.column__uo9A)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ttXo1
                  )}
                >
                  {"DOB:"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__xjzz)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1Xod3)}
                >
                  {renderPlasmicSlot({
                    defaultContents: "7/1/2022",
                    value: args.dob,
                    className: classNames(sty.slotTargetDob)
                  })}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__yMpMi)}>
              <div className={classNames(projectcss.all, sty.column__qf288)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0WxS
                  )}
                >
                  {"Sex:"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__psJvS)}>
                <div className={classNames(projectcss.all, sty.freeBox__hmXdx)}>
                  {renderPlasmicSlot({
                    defaultContents: "Male",
                    value: args.sex,
                    className: classNames(sty.slotTargetSex)
                  })}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__nDBb)}>
              <div className={classNames(projectcss.all, sty.column__a9En)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Bpzv
                  )}
                >
                  {"Race: "}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___4Knuy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptJDa
                  )}
                >
                  {"White"}
                </div>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ounBk
              )}
            >
              <React.Fragment>
                <React.Fragment>{"Today's date: "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"9/25/2025"}
                </span>
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"scrollContainer"}
            data-plasmic-override={overrides.scrollContainer}
            className={classNames(projectcss.all, sty.scrollContainer)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yi0M2)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.columns__fy7WK)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__d10Vm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rzqpp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ggHtG
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rJfYr
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nzbT0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wewuw
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tQN
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d5HEn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uSTc0
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ajRmj
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f8C7H
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iWSnp
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__maaxb
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cDrsc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vwH0J
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dp3Wu
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0ZZwm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__szBzx
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nGpNo
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__h4VIa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5YXqx
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__phDjg
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mJzCn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eaj0N
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rSDvZ
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i5AJ6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3TB04
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ukcl4
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__u2KI2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yHt8
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eUywM
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hzKvw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pJpm4
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wneSe
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dVDxX
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__trm8
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wsSKe
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cNFio
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qD6Qe
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__spQlc
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z3IH4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mouv1
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__otjOx
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lVyNs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o106Y
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z2Ujg
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dRsKc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p6Cig
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9JY6N
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xoAjT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xpwDw
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qnkOp
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__okLU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tdse
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sgiPi
                          )}
                        >
                          {"Height/Weight: "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Jjgc
                          )}
                        >
                          {
                            "37.0 inches, 35.2 lbs\r\n(~70\rth\r percentile for both height and weight)"
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                ),
                value: args.children
              })}
            </div>
          </div>
        </div>
      </div>
      {(hasVariant($state, "tab", "two") ? true : false) ? (
        <div
          data-plasmic-name={"tab2"}
          data-plasmic-override={overrides.tab2}
          className={classNames(projectcss.all, sty.tab2, {
            [sty.tab2tab_two]: hasVariant($state, "tab", "two")
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eaqUe)}>
            <div className={classNames(projectcss.all, sty.freeBox__izrNw)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__vZl3O)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                  />
                ),

                value: args.tab2Image
              })}
            </div>
            <div
              data-plasmic-name={"scrollContainer2"}
              data-plasmic-override={overrides.scrollContainer2}
              className={classNames(projectcss.all, sty.scrollContainer2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__n7Gr)}>
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fwVp8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__al420
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q0WpY
                          )}
                        >
                          {"General:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__udJ7J
                          )}
                        >
                          {
                            "Alert, interactive, age-appropriate behavior. Well-nourhsed and well-hydrated."
                          }
                        </div>
                      </div>
                    </div>
                  ),
                  value: args.children2
                })}
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tabWrapper: [
    "tabWrapper",
    "tab1",
    "scrollContainer",
    "tab2",
    "scrollContainer2"
  ],
  tab1: ["tab1", "scrollContainer"],
  scrollContainer: ["scrollContainer"],
  tab2: ["tab2", "scrollContainer2"],
  scrollContainer2: ["scrollContainer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tabWrapper: "div";
  tab1: "div";
  scrollContainer: "div";
  tab2: "div";
  scrollContainer2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClueTabbedContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClueTabbedContainer__VariantsArgs;
    args?: PlasmicClueTabbedContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicClueTabbedContainer__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicClueTabbedContainer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClueTabbedContainer__ArgProps,
          internalVariantPropNames: PlasmicClueTabbedContainer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClueTabbedContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tabWrapper") {
    func.displayName = "PlasmicClueTabbedContainer";
  } else {
    func.displayName = `PlasmicClueTabbedContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicClueTabbedContainer = Object.assign(
  // Top-level PlasmicClueTabbedContainer renders the root element
  makeNodeComponent("tabWrapper"),
  {
    // Helper components rendering sub-elements
    tab1: makeNodeComponent("tab1"),
    scrollContainer: makeNodeComponent("scrollContainer"),
    tab2: makeNodeComponent("tab2"),
    scrollContainer2: makeNodeComponent("scrollContainer2"),

    // Metadata about props expected for PlasmicClueTabbedContainer
    internalVariantProps: PlasmicClueTabbedContainer__VariantProps,
    internalArgProps: PlasmicClueTabbedContainer__ArgProps
  }
);

export default PlasmicClueTabbedContainer;
/* prettier-ignore-end */
