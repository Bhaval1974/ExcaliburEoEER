/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: QwShmI9xWLXM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Room from "../../Room"; // plasmic-import: Yh00axG1xzsR/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicRoomMap.module.css"; // plasmic-import: QwShmI9xWLXM/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ZMoSd5dtyVZ7/icon

createPlasmicElementProxy;

export type PlasmicRoomMap__VariantMembers = {
  active: "_1" | "_2" | "_3";
};
export type PlasmicRoomMap__VariantsArgs = {
  active?: SingleChoiceArg<"_1" | "_2" | "_3">;
};
type VariantPropType = keyof PlasmicRoomMap__VariantsArgs;
export const PlasmicRoomMap__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicRoomMap__ArgsType = {
  onClickRoom?: (event: any) => void;
  onClickRoomTopLeft?: (event: any) => void;
  onClickRoomTopMiddle?: (event: any) => void;
  onClickRoomTopRight?: (event: any) => void;
  onClickWaitingRoom?: (event: any) => void;
};
type ArgPropType = keyof PlasmicRoomMap__ArgsType;
export const PlasmicRoomMap__ArgProps = new Array<ArgPropType>(
  "onClickRoom",
  "onClickRoomTopLeft",
  "onClickRoomTopMiddle",
  "onClickRoomTopRight",
  "onClickWaitingRoom"
);

export type PlasmicRoomMap__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultRoomMapProps {
  onClickRoom?: (event: any) => void;
  onClickRoomTopLeft?: (event: any) => void;
  onClickRoomTopMiddle?: (event: any) => void;
  onClickRoomTopRight?: (event: any) => void;
  onClickWaitingRoom?: (event: any) => void;
  active?: SingleChoiceArg<"_1" | "_2" | "_3">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRoomMap__RenderFunc(props: {
  variants: PlasmicRoomMap__VariantsArgs;
  args: PlasmicRoomMap__ArgsType;
  overrides: PlasmicRoomMap__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__csLGf)}>
        <Room
          active={
            hasVariant($state, "active", "_3")
              ? undefined
              : hasVariant($state, "active", "_2")
                ? undefined
                : true
          }
          className={classNames("__wab_instance", sty.room__zszjz, {
            [sty.roomactive__2__zszjzyNEpE]: hasVariant($state, "active", "_2"),
            [sty.roomactive__3__zszjzfZlVv]: hasVariant($state, "active", "_3")
          })}
          onClickRoom={args.onClickRoomTopLeft}
        />

        <Room
          active={hasVariant($state, "active", "_2") ? true : undefined}
          className={classNames("__wab_instance", sty.room__uDdGc, {
            [sty.roomactive__1__uDdGcsJf9A]: hasVariant($state, "active", "_1"),
            [sty.roomactive__2__uDdGcyNEpE]: hasVariant($state, "active", "_2"),
            [sty.roomactive__3__uDdGcfZlVv]: hasVariant($state, "active", "_3")
          })}
          locked={
            hasVariant($state, "active", "_3")
              ? undefined
              : hasVariant($state, "active", "_2")
                ? undefined
                : true
          }
          onClickRoom={args.onClickRoomTopMiddle}
        >
          {"Sharese's\nExam Room"}
        </Room>
        <Room
          active={hasVariant($state, "active", "_3") ? true : undefined}
          className={classNames("__wab_instance", sty.room__hUo2S, {
            [sty.roomactive__3__hUo2SfZlVv]: hasVariant($state, "active", "_3")
          })}
          locked={hasVariant($state, "active", "_3") ? undefined : true}
          onClickRoom={args.onClickRoomTopRight}
        >
          {"Ivan's\nExam Room"}
        </Room>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___6OJBi)}>
        <Room
          className={classNames("__wab_instance", sty.room__vNxAb, {
            [sty.roomactive__1__vNxAbsJf9A]: hasVariant($state, "active", "_1")
          })}
          onClickRoom={args.onClickWaitingRoom}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kvvSd
            )}
          >
            {"Waiting Room"}
          </div>
        </Room>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__kJlla)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1Oax
          )}
        >
          {"Click"}
        </div>
        <CheckSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__orCtr
          )}
        >
          {"to go back to the rooms you have visited."}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoomMap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoomMap__VariantsArgs;
    args?: PlasmicRoomMap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRoomMap__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRoomMap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRoomMap__ArgProps,
          internalVariantPropNames: PlasmicRoomMap__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRoomMap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoomMap";
  } else {
    func.displayName = `PlasmicRoomMap.${nodeName}`;
  }
  return func;
}

export const PlasmicRoomMap = Object.assign(
  // Top-level PlasmicRoomMap renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicRoomMap
    internalVariantProps: PlasmicRoomMap__VariantProps,
    internalArgProps: PlasmicRoomMap__ArgProps
  }
);

export default PlasmicRoomMap;
/* prettier-ignore-end */
