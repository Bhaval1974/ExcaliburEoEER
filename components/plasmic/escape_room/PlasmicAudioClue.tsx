/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: c4Zno2TVCEGN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicAudioClue.module.css"; // plasmic-import: c4Zno2TVCEGN/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: UwQOuHLpF5yf/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: zzJGgbOt5IsP/icon

createPlasmicElementProxy;

export type PlasmicAudioClue__VariantMembers = {};
export type PlasmicAudioClue__VariantsArgs = {};
type VariantPropType = keyof PlasmicAudioClue__VariantsArgs;
export const PlasmicAudioClue__VariantProps = new Array<VariantPropType>();

export type PlasmicAudioClue__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAudioClue__ArgsType;
export const PlasmicAudioClue__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicAudioClue__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultAudioClueProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAudioClue__RenderFunc(props: {
  variants: PlasmicAudioClue__VariantsArgs;
  args: PlasmicAudioClue__ArgsType;
  overrides: PlasmicAudioClue__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.column__rkPdm)}>
        <div className={classNames(projectcss.all, sty.freeBox__qXcdO)}>
          <div className={classNames(projectcss.all, sty.freeBox___2Li9F)}>
            {renderPlasmicSlot({
              defaultContents: "Kelvin's mom",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nh2HB)}
                displayHeight={"300px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"250px"}
                loading={"lazy"}
              />
            ),

            value: args.slot
          })}
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"CLICK TO PLAY, PAUSE, OR STOP AUDIO"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bP0Me)}>
            <Icon4Icon
              className={classNames(projectcss.all, sty.svg__v3PHh)}
              role={"img"}
            />

            <Icon5Icon
              className={classNames(projectcss.all, sty.svg__mYzo)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3B5Jr)}>
            {renderPlasmicSlot({
              defaultContents: "48 seconds",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.column__w1Hc)}>
        <div className={classNames(projectcss.all, sty.freeBox__wk1I)}>
          {renderPlasmicSlot({
            defaultContents:
              "As a baby, Kelvin would throw up every now and then, which we a\r\nlways just figured was normal baby\r\nbehavior. But then a few months ago, it started happening much more regularly, maybe once or\r\ntwice a month, and didn\u2019t seem to have anything to do with him being sick. Our pediatrician said it\r\nwas likely just a little kid with an upset stomach, but she told us to keep an eye on it.\r\nIn the last few weeks, Kelvin is throwing up much more often, at least once a week, and sometimes\r\nnearly every day. He\u2019s told us his throat hurts too, especially later in the day. Mealtimes are really\r\nhard. He\u2019s always fussy while eating, and he refuses a lot of foods, especially things like raw\r\nvegetables and meat that is chewy. He\u2019s much better with soft foods like applesauce, yogurt, and\r\nchicken nuggets. It was taking us an hour or more to feed him a single meal at home, so we just\r\nstopped giving him things he couldn\u2019t swallow easily.\r\nSince he\u2019s started going to daycare, we\u2019ve been packing protein shakes in his lunch so we can be sure\r\nhe gets enough calories. Kelvin seems to be growing OK, but we\u2019re really worried that his vomiting\r\nand eating problems are a sign that something more is going on with him. What do you think?",
            value: args.slot3,
            className: classNames(sty.slotTargetSlot3)
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAudioClue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAudioClue__VariantsArgs;
    args?: PlasmicAudioClue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAudioClue__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAudioClue__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAudioClue__ArgProps,
          internalVariantPropNames: PlasmicAudioClue__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAudioClue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAudioClue";
  } else {
    func.displayName = `PlasmicAudioClue.${nodeName}`;
  }
  return func;
}

export const PlasmicAudioClue = Object.assign(
  // Top-level PlasmicAudioClue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAudioClue
    internalVariantProps: PlasmicAudioClue__VariantProps,
    internalArgProps: PlasmicAudioClue__ArgProps
  }
);

export default PlasmicAudioClue;
/* prettier-ignore-end */
