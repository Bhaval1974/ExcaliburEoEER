/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: hYHCVxAKLCEX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import QuestionModal from "../../QuestionModal"; // plasmic-import: k8q3s-VwBO0i/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicFinalTest.module.css"; // plasmic-import: hYHCVxAKLCEX/css

createPlasmicElementProxy;

export type PlasmicFinalTest__VariantMembers = {};
export type PlasmicFinalTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinalTest__VariantsArgs;
export const PlasmicFinalTest__VariantProps = new Array<VariantPropType>();

export type PlasmicFinalTest__ArgsType = {
  finalQuestion?: string;
  finalA?: string;
  finalB?: string;
  finalC?: string;
  finalD?: string;
  finalCorrect?: string;
  finalQuestionIdOne?: string;
  finalQuestionId?: string;
  onClickSubmit?: (event: any) => void;
  onClickContinue?: (event: any) => void;
  currentStep?: number;
};
type ArgPropType = keyof PlasmicFinalTest__ArgsType;
export const PlasmicFinalTest__ArgProps = new Array<ArgPropType>(
  "finalQuestion",
  "finalA",
  "finalB",
  "finalC",
  "finalD",
  "finalCorrect",
  "finalQuestionIdOne",
  "finalQuestionId",
  "onClickSubmit",
  "onClickContinue",
  "currentStep"
);

export type PlasmicFinalTest__OverridesType = {
  root?: Flex__<"div">;
  questionModal?: Flex__<typeof QuestionModal>;
};

export interface DefaultFinalTestProps {
  finalQuestion?: string;
  finalA?: string;
  finalB?: string;
  finalC?: string;
  finalD?: string;
  finalCorrect?: string;
  finalQuestionIdOne?: string;
  finalQuestionId?: string;
  onClickSubmit?: (event: any) => void;
  onClickContinue?: (event: any) => void;
  currentStep?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinalTest__RenderFunc(props: {
  variants: PlasmicFinalTest__VariantsArgs;
  args: PlasmicFinalTest__ArgsType;
  overrides: PlasmicFinalTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          currentStep: 1
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "wager",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "isSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isSelected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isCorrect",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedOptionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "questionModal.isSelected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isSelected;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "questionModal.step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__szoVu
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.isSelected;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__xvxVm
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.finalCorrect;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5Lt18
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.isSubmitted;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <QuestionModal
        data-plasmic-name={"questionModal"}
        data-plasmic-override={overrides.questionModal}
        answerA={args.finalA}
        answerB={args.finalB}
        answerC={args.finalC}
        answerD={args.finalD}
        className={classNames("__wab_instance", sty.questionModal)}
        controlledCorrectAnswer={(() => {
          try {
            return $props.finalCorrect;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        controlledIsSubmitted={(() => {
          try {
            return $state.isSubmitted;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        controlledSelectedOptionId={(() => {
          try {
            return $state.isSelected;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        correctAnswer={args.finalCorrect}
        currentStep={args.currentStep}
        design={"finalOne"}
        finalQuestion={args.finalQuestion}
        isSelected={generateStateValueProp($state, [
          "questionModal",
          "isSelected"
        ])}
        onClickA={async event => {
          const $steps = {};

          $steps["updateIsSelected"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSelected"]
                  },
                  operation: 0,
                  value: "A"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSelected"] != null &&
            typeof $steps["updateIsSelected"] === "object" &&
            typeof $steps["updateIsSelected"].then === "function"
          ) {
            $steps["updateIsSelected"] = await $steps["updateIsSelected"];
          }

          $steps["updateIsSubmitted"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSubmitted"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSubmitted"] != null &&
            typeof $steps["updateIsSubmitted"] === "object" &&
            typeof $steps["updateIsSubmitted"].then === "function"
          ) {
            $steps["updateIsSubmitted"] = await $steps["updateIsSubmitted"];
          }
        }}
        onClickB={async event => {
          const $steps = {};

          $steps["updateIsSelected"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSelected"]
                  },
                  operation: 0,
                  value: "B"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSelected"] != null &&
            typeof $steps["updateIsSelected"] === "object" &&
            typeof $steps["updateIsSelected"].then === "function"
          ) {
            $steps["updateIsSelected"] = await $steps["updateIsSelected"];
          }

          $steps["updateIsSubmitted"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSubmitted"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSubmitted"] != null &&
            typeof $steps["updateIsSubmitted"] === "object" &&
            typeof $steps["updateIsSubmitted"].then === "function"
          ) {
            $steps["updateIsSubmitted"] = await $steps["updateIsSubmitted"];
          }
        }}
        onClickC={async event => {
          const $steps = {};

          $steps["updateIsSelected"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSelected"]
                  },
                  operation: 0,
                  value: "C"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSelected"] != null &&
            typeof $steps["updateIsSelected"] === "object" &&
            typeof $steps["updateIsSelected"].then === "function"
          ) {
            $steps["updateIsSelected"] = await $steps["updateIsSelected"];
          }

          $steps["updateIsSubmitted"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSubmitted"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSubmitted"] != null &&
            typeof $steps["updateIsSubmitted"] === "object" &&
            typeof $steps["updateIsSubmitted"].then === "function"
          ) {
            $steps["updateIsSubmitted"] = await $steps["updateIsSubmitted"];
          }
        }}
        onClickClose={async event => {
          const $steps = {};
        }}
        onClickConfident={async event => {
          const $steps = {};

          $steps["updateWager"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["wager"]
                  },
                  operation: 0
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateWager"] != null &&
            typeof $steps["updateWager"] === "object" &&
            typeof $steps["updateWager"].then === "function"
          ) {
            $steps["updateWager"] = await $steps["updateWager"];
          }
        }}
        onClickContinue={args.onClickContinue}
        onClickD={async event => {
          const $steps = {};

          $steps["updateIsSelected"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSelected"]
                  },
                  operation: 0,
                  value: "D"
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSelected"] != null &&
            typeof $steps["updateIsSelected"] === "object" &&
            typeof $steps["updateIsSelected"].then === "function"
          ) {
            $steps["updateIsSelected"] = await $steps["updateIsSelected"];
          }

          $steps["updateIsSubmitted"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSubmitted"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSubmitted"] != null &&
            typeof $steps["updateIsSubmitted"] === "object" &&
            typeof $steps["updateIsSubmitted"].then === "function"
          ) {
            $steps["updateIsSubmitted"] = await $steps["updateIsSubmitted"];
          }
        }}
        onClickLessConfident={async event => {
          const $steps = {};

          $steps["updateWager"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["wager"]
                  },
                  operation: 0,
                  value: 3
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateWager"] != null &&
            typeof $steps["updateWager"] === "object" &&
            typeof $steps["updateWager"].then === "function"
          ) {
            $steps["updateWager"] = await $steps["updateWager"];
          }
        }}
        onClickSubmit={async event => {
          const $steps = {};

          $steps["updateIsSubmitted"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isSubmitted"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsSubmitted"] != null &&
            typeof $steps["updateIsSubmitted"] === "object" &&
            typeof $steps["updateIsSubmitted"].then === "function"
          ) {
            $steps["updateIsSubmitted"] = await $steps["updateIsSubmitted"];
          }
        }}
        onClickVeryConfident={async event => {
          const $steps = {};

          $steps["updateWager"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["wager"]
                  },
                  operation: 0
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateWager"] != null &&
            typeof $steps["updateWager"] === "object" &&
            typeof $steps["updateWager"].then === "function"
          ) {
            $steps["updateWager"] = await $steps["updateWager"];
          }
        }}
        onIsSelectedChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "questionModal",
            "isSelected"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onStepChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["questionModal", "step"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        question={args.finalQuestion}
        questionId={args.finalQuestionId}
        slotContent={"wager"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "questionModal"],
  questionModal: ["questionModal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  questionModal: typeof QuestionModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinalTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinalTest__VariantsArgs;
    args?: PlasmicFinalTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFinalTest__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFinalTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinalTest__ArgProps,
          internalVariantPropNames: PlasmicFinalTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinalTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinalTest";
  } else {
    func.displayName = `PlasmicFinalTest.${nodeName}`;
  }
  return func;
}

export const PlasmicFinalTest = Object.assign(
  // Top-level PlasmicFinalTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    questionModal: makeNodeComponent("questionModal"),

    // Metadata about props expected for PlasmicFinalTest
    internalVariantProps: PlasmicFinalTest__VariantProps,
    internalArgProps: PlasmicFinalTest__ArgProps
  }
);

export default PlasmicFinalTest;
/* prettier-ignore-end */
