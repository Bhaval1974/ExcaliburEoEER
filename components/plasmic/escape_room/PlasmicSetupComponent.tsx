/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: fWR9UF4hHhGj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import InfographEdButton from "../../InfographEdButton"; // plasmic-import: TjjevRS570P0/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicSetupComponent.module.css"; // plasmic-import: fWR9UF4hHhGj/css

createPlasmicElementProxy;

export type PlasmicSetupComponent__VariantMembers = {};
export type PlasmicSetupComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSetupComponent__VariantsArgs;
export const PlasmicSetupComponent__VariantProps = new Array<VariantPropType>();

export type PlasmicSetupComponent__ArgsType = {
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicSetupComponent__ArgsType;
export const PlasmicSetupComponent__ArgProps = new Array<ArgPropType>(
  "onClick"
);

export type PlasmicSetupComponent__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  firstName?: Flex__<"input">;
  lastName?: Flex__<"input">;
  infographEdButton?: Flex__<typeof InfographEdButton>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSetupComponentProps {
  onClick?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSetupComponent__RenderFunc(props: {
  variants: PlasmicSetupComponent__VariantsArgs;
  args: PlasmicSetupComponent__ArgsType;
  overrides: PlasmicSetupComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___7Qery)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__umEjX
          )}
        >
          {"The Eosinophilic Esophagitis (EoE) Care Team\r"}
        </div>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__gztV)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__flSol
              )}
            >
              {
                "A unique educational activity that will test your knowledge as well as your ability to\r\nsynthesize diagnostic and treatment-related clues to \u201csolve\u201d three patient cases"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p5Rrl
              )}
            >
              {"ENTER YOUR FIRST AND LAST NAME TO APPEAR ON THE LEADERBOARD\r"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kynrA)}>
              <div className={classNames(projectcss.all, sty.freeBox___7TXwl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yE33
                  )}
                >
                  {"FIRST NAME"}
                </div>
                <input
                  data-plasmic-name={"firstName"}
                  data-plasmic-override={overrides.firstName}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.firstName
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["firstName", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"Enter here"}
                  ref={ref => {
                    $refs["firstName"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["firstName", "value"]) ?? ""
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___70ZbI)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x2VBy
                  )}
                >
                  {"LAST NAME"}
                </div>
                <input
                  data-plasmic-name={"lastName"}
                  data-plasmic-override={overrides.lastName}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.lastName
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["lastName", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"Enter here"}
                  ref={ref => {
                    $refs["lastName"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["lastName", "value"]) ?? ""
                  }
                />
              </div>
            </div>
            <InfographEdButton
              data-plasmic-name={"infographEdButton"}
              data-plasmic-override={overrides.infographEdButton}
              className={classNames("__wab_instance", sty.infographEdButton)}
              onClick={args.onClick}
            >
              {"begin"}
            </InfographEdButton>
          </div>
          <div className={classNames(projectcss.all, sty.column__h3Iu4)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "firstName",
    "lastName",
    "infographEdButton",
    "img"
  ],
  columns: ["columns", "firstName", "lastName", "infographEdButton", "img"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  infographEdButton: ["infographEdButton"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  firstName: "input";
  lastName: "input";
  infographEdButton: typeof InfographEdButton;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSetupComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSetupComponent__VariantsArgs;
    args?: PlasmicSetupComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSetupComponent__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSetupComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSetupComponent__ArgProps,
          internalVariantPropNames: PlasmicSetupComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSetupComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSetupComponent";
  } else {
    func.displayName = `PlasmicSetupComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicSetupComponent = Object.assign(
  // Top-level PlasmicSetupComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    infographEdButton: makeNodeComponent("infographEdButton"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSetupComponent
    internalVariantProps: PlasmicSetupComponent__VariantProps,
    internalArgProps: PlasmicSetupComponent__ArgProps
  }
);

export default PlasmicSetupComponent;
/* prettier-ignore-end */
