/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: 5EdiZs8JGIKI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BottomToolbar from "../../BottomToolbar"; // plasmic-import: 2RFJUesBV3VF/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicSpecialty.module.css"; // plasmic-import: 5EdiZs8JGIKI/css

createPlasmicElementProxy;

export type PlasmicSpecialty__VariantMembers = {};
export type PlasmicSpecialty__VariantsArgs = {};
type VariantPropType = keyof PlasmicSpecialty__VariantsArgs;
export const PlasmicSpecialty__VariantProps = new Array<VariantPropType>();

export type PlasmicSpecialty__ArgsType = {};
type ArgPropType = keyof PlasmicSpecialty__ArgsType;
export const PlasmicSpecialty__ArgProps = new Array<ArgPropType>();

export type PlasmicSpecialty__OverridesType = {
  root?: Flex__<"div">;
  selectYourSpecialty?: Flex__<"div">;
  bottomToolbar?: Flex__<typeof BottomToolbar>;
};

export interface DefaultSpecialtyProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSpecialty__RenderFunc(props: {
  variants: PlasmicSpecialty__VariantsArgs;
  args: PlasmicSpecialty__ArgsType;
  overrides: PlasmicSpecialty__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ei6Nb)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bgZq
              )}
            >
              {"Choose Your Specialty"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pegcI)}>
              <div className={classNames(projectcss.all, sty.freeBox__nbrBt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5Gmml
                  )}
                >
                  {
                    "In this activity, you will be asked to answer a series of\r questions related to the diagnosis, treatment, and long-term\r management of patients with EoE.\r\n\nThere are two tracks available\u2014one for specialists with a more\r advanced baseline knowledge of EoE and a second track for\rprimary care providers and pediatricians, who play a more \rsupportive role in the management of EoE.\r\n\nWhile you are welcome to choose either track, we recommend \rchoosing the track that best aligns with your current level of\r knowledge to maximize the educational value of this activity."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vWKqK)}>
                <div
                  data-plasmic-name={"selectYourSpecialty"}
                  data-plasmic-override={overrides.selectYourSpecialty}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.selectYourSpecialty
                  )}
                >
                  {"SELECT YOUR SPECIALTY"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jWi6R)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gxv98)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToExamSpecialty"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/exam-specialty`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToExamSpecialty"] != null &&
                        typeof $steps["goToExamSpecialty"] === "object" &&
                        typeof $steps["goToExamSpecialty"].then === "function"
                      ) {
                        $steps["goToExamSpecialty"] =
                          await $steps["goToExamSpecialty"];
                      }
                    }}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__eyo5H)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/escape_room/images/gastroenterologyAllergyProviderSvg.svg",
                        fullWidth: 301.23,
                        fullHeight: 444.47,
                        aspectRatio: 0.677729
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p6JEs
                      )}
                    >
                      {"Gastroenterology/\n\rAllergy Provider"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__my45V)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToExamPcp"] = true
                        ? (() => {
                            const actionArgs = { destination: `/exam-pcp` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToExamPcp"] != null &&
                        typeof $steps["goToExamPcp"] === "object" &&
                        typeof $steps["goToExamPcp"].then === "function"
                      ) {
                        $steps["goToExamPcp"] = await $steps["goToExamPcp"];
                      }
                    }}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__usK65)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/escape_room/images/pcpPediatricianSvg.svg",
                        fullWidth: 300.96,
                        fullHeight: 447.64,
                        aspectRatio: 0.672326
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wretO
                      )}
                    >
                      {"Primary Care Physician (PCP)"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <BottomToolbar
              data-plasmic-name={"bottomToolbar"}
              data-plasmic-override={overrides.bottomToolbar}
              className={classNames("__wab_instance", sty.bottomToolbar)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "selectYourSpecialty", "bottomToolbar"],
  selectYourSpecialty: ["selectYourSpecialty"],
  bottomToolbar: ["bottomToolbar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectYourSpecialty: "div";
  bottomToolbar: typeof BottomToolbar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSpecialty__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSpecialty__VariantsArgs;
    args?: PlasmicSpecialty__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSpecialty__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSpecialty__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSpecialty__ArgProps,
          internalVariantPropNames: PlasmicSpecialty__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSpecialty__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSpecialty";
  } else {
    func.displayName = `PlasmicSpecialty.${nodeName}`;
  }
  return func;
}

export const PlasmicSpecialty = Object.assign(
  // Top-level PlasmicSpecialty renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectYourSpecialty: makeNodeComponent("selectYourSpecialty"),
    bottomToolbar: makeNodeComponent("bottomToolbar"),

    // Metadata about props expected for PlasmicSpecialty
    internalVariantProps: PlasmicSpecialty__VariantProps,
    internalArgProps: PlasmicSpecialty__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSpecialty;
/* prettier-ignore-end */
