/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: Yh00axG1xzsR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicRoom.module.css"; // plasmic-import: Yh00axG1xzsR/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ZMoSd5dtyVZ7/icon
import Lock1SvgIcon from "./icons/PlasmicIcon__Lock1Svg"; // plasmic-import: w2AEEyZLPBdy/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: k-ShCOXXiZX0/icon

createPlasmicElementProxy;

export type PlasmicRoom__VariantMembers = {
  locked: "locked";
  active: "active";
};
export type PlasmicRoom__VariantsArgs = {
  locked?: SingleBooleanChoiceArg<"locked">;
  active?: SingleBooleanChoiceArg<"active">;
};
type VariantPropType = keyof PlasmicRoom__VariantsArgs;
export const PlasmicRoom__VariantProps = new Array<VariantPropType>(
  "locked",
  "active"
);

export type PlasmicRoom__ArgsType = {
  children?: React.ReactNode;
  onClickRoom?: (event: any) => void;
};
type ArgPropType = keyof PlasmicRoom__ArgsType;
export const PlasmicRoom__ArgProps = new Array<ArgPropType>(
  "children",
  "onClickRoom"
);

export type PlasmicRoom__OverridesType = {
  root?: Flex__<"div">;
  check?: Flex__<"svg">;
  lock?: Flex__<"svg">;
  pin?: Flex__<"svg">;
  freeBox?: Flex__<"div">;
};

export interface DefaultRoomProps {
  children?: React.ReactNode;
  onClickRoom?: (event: any) => void;
  locked?: SingleBooleanChoiceArg<"locked">;
  active?: SingleBooleanChoiceArg<"active">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRoom__RenderFunc(props: {
  variants: PlasmicRoom__VariantsArgs;
  args: PlasmicRoom__ArgsType;
  overrides: PlasmicRoom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "locked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.locked
      },
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.rootlocked]: hasVariant($state, "locked", "locked")
        }
      )}
      onClick={args.onClickRoom}
    >
      <CheckSvgIcon
        data-plasmic-name={"check"}
        data-plasmic-override={overrides.check}
        className={classNames(projectcss.all, sty.check, {
          [sty.checkactive]: hasVariant($state, "active", "active"),
          [sty.checklocked]: hasVariant($state, "locked", "locked")
        })}
        role={"img"}
      />

      <PlasmicIcon__
        data-plasmic-name={"lock"}
        data-plasmic-override={overrides.lock}
        PlasmicIconType={
          hasVariant($state, "locked", "locked") ? Lock1SvgIcon : Lock1SvgIcon
        }
        className={classNames(projectcss.all, sty.lock, {
          [sty.lockactive]: hasVariant($state, "active", "active"),
          [sty.locklocked]: hasVariant($state, "locked", "locked")
        })}
        role={"img"}
      />

      <Icon7Icon
        data-plasmic-name={"pin"}
        data-plasmic-override={overrides.pin}
        className={classNames(projectcss.all, sty.pin, {
          [sty.pinactive]: hasVariant($state, "active", "active"),
          [sty.pinlocked]: hasVariant($state, "locked", "locked")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxactive]: hasVariant($state, "active", "active")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Kelvin's \nExam Room",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenactive]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.slotTargetChildrenlocked]: hasVariant(
              $state,
              "locked",
              "locked"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "check", "lock", "pin", "freeBox"],
  check: ["check"],
  lock: ["lock"],
  pin: ["pin"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  check: "svg";
  lock: "svg";
  pin: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoom__VariantsArgs;
    args?: PlasmicRoom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicRoom__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicRoom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRoom__ArgProps,
          internalVariantPropNames: PlasmicRoom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRoom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoom";
  } else {
    func.displayName = `PlasmicRoom.${nodeName}`;
  }
  return func;
}

export const PlasmicRoom = Object.assign(
  // Top-level PlasmicRoom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    check: makeNodeComponent("check"),
    lock: makeNodeComponent("lock"),
    pin: makeNodeComponent("pin"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicRoom
    internalVariantProps: PlasmicRoom__VariantProps,
    internalArgProps: PlasmicRoom__ArgProps
  }
);

export default PlasmicRoom;
/* prettier-ignore-end */
