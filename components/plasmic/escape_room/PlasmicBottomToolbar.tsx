/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: 2RFJUesBV3VF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicBottomToolbar.module.css"; // plasmic-import: 2RFJUesBV3VF/css

createPlasmicElementProxy;

export type PlasmicBottomToolbar__VariantMembers = {
  hasReference: "visible";
};
export type PlasmicBottomToolbar__VariantsArgs = {
  hasReference?: SingleChoiceArg<"visible">;
};
type VariantPropType = keyof PlasmicBottomToolbar__VariantsArgs;
export const PlasmicBottomToolbar__VariantProps = new Array<VariantPropType>(
  "hasReference"
);

export type PlasmicBottomToolbar__ArgsType = {};
type ArgPropType = keyof PlasmicBottomToolbar__ArgsType;
export const PlasmicBottomToolbar__ArgProps = new Array<ArgPropType>();

export type PlasmicBottomToolbar__OverridesType = {
  root?: Flex__<"div">;
  home?: Flex__<typeof PlasmicImg__>;
  help?: Flex__<typeof PlasmicImg__>;
  glossary?: Flex__<typeof PlasmicImg__>;
  reference2?: Flex__<typeof PlasmicImg__>;
  totalPoints?: Flex__<"div">;
};

export interface DefaultBottomToolbarProps {
  hasReference?: SingleChoiceArg<"visible">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBottomToolbar__RenderFunc(props: {
  variants: PlasmicBottomToolbar__VariantsArgs;
  args: PlasmicBottomToolbar__ArgsType;
  overrides: PlasmicBottomToolbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hasReference",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasReference
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.roothasReference_visible]: hasVariant(
            $state,
            "hasReference",
            "visible"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__j7O7Q)}>
        <PlasmicImg__
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          alt={""}
          className={classNames(sty.home)}
          displayHeight={"75px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"75px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/escape_room/images/homeSvg.svg",
            fullWidth: 77,
            fullHeight: 77,
            aspectRatio: 1
          }}
        />

        <PlasmicImg__
          data-plasmic-name={"help"}
          data-plasmic-override={overrides.help}
          alt={""}
          className={classNames(sty.help, {
            [sty.helphasReference_visible]: hasVariant(
              $state,
              "hasReference",
              "visible"
            )
          })}
          displayHeight={"75px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"75px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/escape_room/images/helpSvg.svg",
            fullWidth: 77,
            fullHeight: 77,
            aspectRatio: 1
          }}
        />

        <PlasmicImg__
          data-plasmic-name={"glossary"}
          data-plasmic-override={overrides.glossary}
          alt={""}
          className={classNames(sty.glossary, {
            [sty.glossaryhasReference_visible]: hasVariant(
              $state,
              "hasReference",
              "visible"
            )
          })}
          displayHeight={"75px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"75px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/escape_room/images/glossarySvg.svg",
            fullWidth: 77,
            fullHeight: 77,
            aspectRatio: 1
          }}
        />

        {(hasVariant($state, "hasReference", "visible") ? true : false) ? (
          <PlasmicImg__
            data-plasmic-name={"reference2"}
            data-plasmic-override={overrides.reference2}
            alt={""}
            className={classNames(sty.reference2, {
              [sty.reference2hasReference_visible]: hasVariant(
                $state,
                "hasReference",
                "visible"
              )
            })}
            displayHeight={"75px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"75px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/escape_room/images/refSvg.svg",
              fullWidth: 77,
              fullHeight: 77,
              aspectRatio: 1
            }}
          />
        ) : null}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__yNkjg)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pFmKh
          )}
        >
          {"CLICK TO REVIEW CLUE"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yzm8J
          )}
        >
          {"The clues you collect will appear here: "}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__pz56F)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wPwti
          )}
        >
          {"YOUR POINTS:"}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__gsFjC, {
            [sty.freeBoxhasReference_visible__gsFjCvbT1R]: hasVariant(
              $state,
              "hasReference",
              "visible"
            )
          })}
        >
          <div
            data-plasmic-name={"totalPoints"}
            data-plasmic-override={overrides.totalPoints}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.totalPoints
            )}
          >
            {"100"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "home", "help", "glossary", "reference2", "totalPoints"],
  home: ["home"],
  help: ["help"],
  glossary: ["glossary"],
  reference2: ["reference2"],
  totalPoints: ["totalPoints"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  home: typeof PlasmicImg__;
  help: typeof PlasmicImg__;
  glossary: typeof PlasmicImg__;
  reference2: typeof PlasmicImg__;
  totalPoints: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBottomToolbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBottomToolbar__VariantsArgs;
    args?: PlasmicBottomToolbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicBottomToolbar__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicBottomToolbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBottomToolbar__ArgProps,
          internalVariantPropNames: PlasmicBottomToolbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBottomToolbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBottomToolbar";
  } else {
    func.displayName = `PlasmicBottomToolbar.${nodeName}`;
  }
  return func;
}

export const PlasmicBottomToolbar = Object.assign(
  // Top-level PlasmicBottomToolbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    help: makeNodeComponent("help"),
    glossary: makeNodeComponent("glossary"),
    reference2: makeNodeComponent("reference2"),
    totalPoints: makeNodeComponent("totalPoints"),

    // Metadata about props expected for PlasmicBottomToolbar
    internalVariantProps: PlasmicBottomToolbar__VariantProps,
    internalArgProps: PlasmicBottomToolbar__ArgProps
  }
);

export default PlasmicBottomToolbar;
/* prettier-ignore-end */
