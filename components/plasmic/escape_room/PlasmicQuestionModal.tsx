/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: k8q3s-VwBO0i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AnswerButton from "../../AnswerButton"; // plasmic-import: AxrUA-GaPp8F/component
import InfographEdButton from "../../InfographEdButton"; // plasmic-import: TjjevRS570P0/component
import WagerCard from "../../WagerCard"; // plasmic-import: w_DAzjAsMVHz/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicQuestionModal.module.css"; // plasmic-import: k8q3s-VwBO0i/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 3DFQxdCHWfpb/icon

createPlasmicElementProxy;

export type PlasmicQuestionModal__VariantMembers = {
  active: "active";
  reasoning: "question1";
  design: "finalOne";
  slotContent: "wager";
};
export type PlasmicQuestionModal__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  reasoning?: SingleChoiceArg<"question1">;
  design?: SingleChoiceArg<"finalOne">;
  slotContent?: SingleChoiceArg<"wager">;
};
type VariantPropType = keyof PlasmicQuestionModal__VariantsArgs;
export const PlasmicQuestionModal__VariantProps = new Array<VariantPropType>(
  "active",
  "reasoning",
  "design",
  "slotContent"
);

export type PlasmicQuestionModal__ArgsType = {
  onClickClose?: (event: any) => void;
  isSelected?: string;
  onIsSelectedChange?: (val: string) => void;
  onClickSubmit?: (event: any) => void;
  questionId?: string;
  questions?: any;
  question?: string;
  answerA?: string;
  answerB?: string;
  answerC?: string;
  answerD?: string;
  onClickVeryConfident?: (event: any) => void;
  onClickConfident?: (event: any) => void;
  onClickLessConfident?: (event: any) => void;
  value?: number;
  correctAnswer?: string;
  finalQuestion?: string;
  onClickA?: (event: any) => void;
  onClickB?: (event: any) => void;
  onClickC?: (event: any) => void;
  onClickD?: (event: any) => void;
  controlledSelectedOptionId?: string;
  controlledIsSubmitted?: boolean;
  controlledCorrectAnswer?: string;
  onClickContinue?: (event: any) => void;
  onStepChange?: (val: string) => void;
  currentStep?: number;
  correctReasoning2?: React.ReactNode;
  incorrectReasoning2?: React.ReactNode;
  correctReasoning?: React.ReactNode;
  incorrectReasoning?: React.ReactNode;
};
type ArgPropType = keyof PlasmicQuestionModal__ArgsType;
export const PlasmicQuestionModal__ArgProps = new Array<ArgPropType>(
  "onClickClose",
  "isSelected",
  "onIsSelectedChange",
  "onClickSubmit",
  "questionId",
  "questions",
  "question",
  "answerA",
  "answerB",
  "answerC",
  "answerD",
  "onClickVeryConfident",
  "onClickConfident",
  "onClickLessConfident",
  "value",
  "correctAnswer",
  "finalQuestion",
  "onClickA",
  "onClickB",
  "onClickC",
  "onClickD",
  "controlledSelectedOptionId",
  "controlledIsSubmitted",
  "controlledCorrectAnswer",
  "onClickContinue",
  "onStepChange",
  "currentStep",
  "correctReasoning2",
  "incorrectReasoning2",
  "correctReasoning",
  "incorrectReasoning"
);

export type PlasmicQuestionModal__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  a?: Flex__<typeof AnswerButton>;
  b?: Flex__<typeof AnswerButton>;
  c?: Flex__<typeof AnswerButton>;
  d?: Flex__<typeof AnswerButton>;
  submit?: Flex__<typeof InfographEdButton>;
  a2?: Flex__<typeof AnswerButton>;
  b2?: Flex__<typeof AnswerButton>;
  c2?: Flex__<typeof AnswerButton>;
  d2?: Flex__<typeof AnswerButton>;
  lessConfident?: Flex__<typeof WagerCard>;
  confident?: Flex__<typeof WagerCard>;
  veryConfident?: Flex__<typeof WagerCard>;
  submit2?: Flex__<typeof InfographEdButton>;
};

export interface DefaultQuestionModalProps {
  onClickClose?: (event: any) => void;
  isSelected?: string;
  onIsSelectedChange?: (val: string) => void;
  onClickSubmit?: (event: any) => void;
  questionId?: string;
  questions?: any;
  question?: string;
  answerA?: string;
  answerB?: string;
  answerC?: string;
  answerD?: string;
  onClickVeryConfident?: (event: any) => void;
  onClickConfident?: (event: any) => void;
  onClickLessConfident?: (event: any) => void;
  value?: number;
  correctAnswer?: string;
  finalQuestion?: string;
  onClickA?: (event: any) => void;
  onClickB?: (event: any) => void;
  onClickC?: (event: any) => void;
  onClickD?: (event: any) => void;
  controlledSelectedOptionId?: string;
  controlledIsSubmitted?: boolean;
  controlledCorrectAnswer?: string;
  onClickContinue?: (event: any) => void;
  onStepChange?: (val: string) => void;
  currentStep?: number;
  correctReasoning2?: React.ReactNode;
  incorrectReasoning2?: React.ReactNode;
  correctReasoning?: React.ReactNode;
  incorrectReasoning?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  reasoning?: SingleChoiceArg<"question1">;
  design?: SingleChoiceArg<"finalOne">;
  slotContent?: SingleChoiceArg<"wager">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestionModal__RenderFunc(props: {
  variants: PlasmicQuestionModal__VariantsArgs;
  args: PlasmicQuestionModal__ArgsType;
  overrides: PlasmicQuestionModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          questions: [],
          controlledIsSubmitted: false,
          currentStep: 1
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "isSelected",
        type: "writable",
        variableType: "text",

        valueProp: "isSelected",
        onChangeProp: "onIsSelectedChange"
      },
      {
        path: "reasoning",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reasoning
      },
      {
        path: "design",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.design
      },
      {
        path: "slotContent",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slotContent
      },
      {
        path: "wager",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "selectedOptionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isCorrect",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "step",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.currentStep;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })(),

        onChangeProp: "onStepChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.rootdesign_finalOne]: hasVariant($state, "design", "finalOne"),
          [sty.rootdesign_finalOne_slotContent_wager]:
            hasVariant($state, "slotContent", "wager") &&
            hasVariant($state, "design", "finalOne"),
          [sty.rootreasoning_question1]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.rootslotContent_wager]: hasVariant(
            $state,
            "slotContent",
            "wager"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__tk1B7, {
          [sty.freeBoxactive__tk1B7Dygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxdesign_finalOne__tk1B7Gw30Z]: hasVariant(
            $state,
            "design",
            "finalOne"
          ),
          [sty.freeBoxreasoning_question1__tk1B7S50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ajtzg
          )}
        >
          {"RETURN TO THE EXAM ROOM"}
        </div>
        <IconIcon
          className={classNames(projectcss.all, sty.svg__nQkgD)}
          onClick={args.onClickClose}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__hsUfh, {
          [sty.freeBoxactive__hsUfhDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxdesign_finalOne__hsUfhGw30Z]: hasVariant(
            $state,
            "design",
            "finalOne"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__omsVe, {
            [sty.freeBoxactive__omsVeDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxdesign_finalOne__omsVeGw30Z]: hasVariant(
              $state,
              "design",
              "finalOne"
            ),
            [sty.freeBoxreasoning_question1__omsVes50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            ),
            [sty.freeBoxslotContent_wager__omsVewFdBj]: hasVariant(
              $state,
              "slotContent",
              "wager"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgactive]: hasVariant($state, "active", "active")
            })}
            displayHeight={"100px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/escape_room/images/hotspotQuestionSvg.svg",
              fullWidth: 102,
              fullHeight: 102,
              aspectRatio: 1
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__p2MCz
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.question;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return " ";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___7WXd3, {
          [sty.freeBoxactive___7WXd3Dygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxdesign_finalOne___7WXd3Gw30Z]: hasVariant(
            $state,
            "design",
            "finalOne"
          ),
          [sty.freeBoxreasoning_question1___7WXd3S50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pppAk, {
            [sty.freeBoxactive__pppAkDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxreasoning_question1__pppAks50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uWe0W)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wqVwQ,
                {
                  [sty.textactive__wqVwQDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.textslotContent_wager__wqVwQwFdBj]: hasVariant(
                    $state,
                    "slotContent",
                    "wager"
                  )
                }
              )}
            >
              {"Select the best answer"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__yAUk2, {
              [sty.freeBoxactive__yAUk2Dygov]: hasVariant(
                $state,
                "active",
                "active"
              ),
              [sty.freeBoxdesign_finalOne__yAUk2Gw30Z]: hasVariant(
                $state,
                "design",
                "finalOne"
              ),
              [sty.freeBoxreasoning_question1__yAUk2S50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <AnswerButton
              data-plasmic-name={"a"}
              data-plasmic-override={overrides.a}
              className={classNames("__wab_instance", sty.a, {
                [sty.aactive]: hasVariant($state, "active", "active"),
                [sty.adesign_finalOne]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.areasoning_question1]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                ),
                [sty.aslotContent_wager]: hasVariant(
                  $state,
                  "slotContent",
                  "wager"
                )
              })}
              correct={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "A" &&
                    $props.correctAnswer === "A"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              incorrect={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "A" &&
                    $props.correctAnswer !== "A"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSubmitted"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected2"] != null &&
                  typeof $steps["updateIsSelected2"] === "object" &&
                  typeof $steps["updateIsSelected2"].then === "function"
                ) {
                  $steps["updateIsSelected2"] =
                    await $steps["updateIsSelected2"];
                }

                $steps["updateSelectedOptionId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedOptionId"]
                        },
                        operation: 0,
                        value: "A"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectedOptionId"] != null &&
                  typeof $steps["updateSelectedOptionId"] === "object" &&
                  typeof $steps["updateSelectedOptionId"].then === "function"
                ) {
                  $steps["updateSelectedOptionId"] =
                    await $steps["updateSelectedOptionId"];
                }

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "A"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return !$state.isSubmitted && $state.selectedOptionId === "A";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerA;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            />

            <AnswerButton
              data-plasmic-name={"b"}
              data-plasmic-override={overrides.b}
              className={classNames("__wab_instance", sty.b, {
                [sty.bactive]: hasVariant($state, "active", "active"),
                [sty.breasoning_question1]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              correct={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "B" &&
                    $props.correctAnswer === "B"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              incorrect={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "B" &&
                    $props.correctAnswer !== "B"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected3"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSubmitted"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected3"] != null &&
                  typeof $steps["updateIsSelected3"] === "object" &&
                  typeof $steps["updateIsSelected3"].then === "function"
                ) {
                  $steps["updateIsSelected3"] =
                    await $steps["updateIsSelected3"];
                }

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "B"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }

                $steps["updateIsSelected2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedOptionId"]
                        },
                        operation: 0,
                        value: "B"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected2"] != null &&
                  typeof $steps["updateIsSelected2"] === "object" &&
                  typeof $steps["updateIsSelected2"].then === "function"
                ) {
                  $steps["updateIsSelected2"] =
                    await $steps["updateIsSelected2"];
                }
              }}
              selected={(() => {
                try {
                  return !$state.isSubmitted && $state.selectedOptionId === "B";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerB;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            >
              {"B"}
            </AnswerButton>
            <AnswerButton
              data-plasmic-name={"c"}
              data-plasmic-override={overrides.c}
              className={classNames("__wab_instance", sty.c, {
                [sty.cactive]: hasVariant($state, "active", "active")
              })}
              correct={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "C" &&
                    $props.correctAnswer === "C"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              incorrect={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "C" &&
                    $props.correctAnswer !== "C"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected3"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSubmitted"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected3"] != null &&
                  typeof $steps["updateIsSelected3"] === "object" &&
                  typeof $steps["updateIsSelected3"].then === "function"
                ) {
                  $steps["updateIsSelected3"] =
                    await $steps["updateIsSelected3"];
                }

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "C"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }

                $steps["updateIsSelected2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedOptionId"]
                        },
                        operation: 0,
                        value: "C"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected2"] != null &&
                  typeof $steps["updateIsSelected2"] === "object" &&
                  typeof $steps["updateIsSelected2"].then === "function"
                ) {
                  $steps["updateIsSelected2"] =
                    await $steps["updateIsSelected2"];
                }
              }}
              selected={(() => {
                try {
                  return !$state.isSubmitted && $state.selectedOptionId === "C";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerC;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            >
              {"C"}
            </AnswerButton>
            <AnswerButton
              data-plasmic-name={"d"}
              data-plasmic-override={overrides.d}
              className={classNames("__wab_instance", sty.d, {
                [sty.dactive]: hasVariant($state, "active", "active"),
                [sty.dreasoning_question1]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              correct={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "D" &&
                    $props.correctAnswer === "D"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              incorrect={(() => {
                try {
                  return (
                    $state.isSubmitted &&
                    $state.selectedOptionId === "D" &&
                    $props.correctAnswer !== "D"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected3"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSubmitted"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected3"] != null &&
                  typeof $steps["updateIsSelected3"] === "object" &&
                  typeof $steps["updateIsSelected3"].then === "function"
                ) {
                  $steps["updateIsSelected3"] =
                    await $steps["updateIsSelected3"];
                }

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "D"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }

                $steps["updateIsSelected2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedOptionId"]
                        },
                        operation: 0,
                        value: "D"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected2"] != null &&
                  typeof $steps["updateIsSelected2"] === "object" &&
                  typeof $steps["updateIsSelected2"].then === "function"
                ) {
                  $steps["updateIsSelected2"] =
                    await $steps["updateIsSelected2"];
                }
              }}
              selected={(() => {
                try {
                  return !$state.isSubmitted && $state.selectedOptionId === "D";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lqEw5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.answerD;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return " ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
            >
              {"D"}
            </AnswerButton>
            {(
              hasVariant($state, "active", "active")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <InfographEdButton
                data-plasmic-name={"submit"}
                data-plasmic-override={overrides.submit}
                active={
                  hasVariant($state, "active", "active") ? true : undefined
                }
                className={classNames("__wab_instance", sty.submit, {
                  [sty.submitactive]: hasVariant($state, "active", "active"),
                  [sty.submitreasoning_question1]: hasVariant(
                    $state,
                    "reasoning",
                    "question1"
                  ),
                  [sty.submitslotContent_wager]: hasVariant(
                    $state,
                    "slotContent",
                    "wager"
                  )
                })}
                isSelected={$state.isSelected}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsSubmitted"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isSubmitted"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsSubmitted"] != null &&
                    typeof $steps["updateIsSubmitted"] === "object" &&
                    typeof $steps["updateIsSubmitted"].then === "function"
                  ) {
                    $steps["updateIsSubmitted"] =
                      await $steps["updateIsSubmitted"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const q = (
                                $props.questions?.questions || []
                              ).find(qq => qq.id === $props.questionId);
                              if (!q) return;
                              $state.attempts = ($state.attempts ?? 0) + 1;
                              const isCorrect =
                                $state.selectedOptionId === q.correctAnswer;
                              $state.isCorrect = isCorrect;
                              return ($state.lastSubmission = {
                                questionId: q.id,
                                selected: $state.selectedOptionId,
                                correctAnswer: q.correctAnswer,
                                isCorrect,
                                attempts: $state.attempts,
                                ts: Date.now()
                              });
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onClickSubmit={args.onClickSubmit}
              />
            ) : null}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__fLmWo, {
            [sty.freeBoxdesign_finalOne_slotContent_wager__fLmWogw30ZWFdBj]:
              hasVariant($state, "slotContent", "wager") &&
              hasVariant($state, "design", "finalOne"),
            [sty.freeBoxreasoning_question1__fLmWOs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          {(hasVariant($state, "slotContent", "wager") ? false : true)
            ? renderPlasmicSlot({
                defaultContents: null,
                value: args.correctReasoning2,
                className: classNames(sty.slotTargetCorrectReasoning2, {
                  [sty.slotTargetCorrectReasoning2active]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.slotTargetCorrectReasoning2reasoning_question1]:
                    hasVariant($state, "reasoning", "question1"),
                  [sty.slotTargetCorrectReasoning2slotContent_wager]:
                    hasVariant($state, "slotContent", "wager")
                })
              })
            : null}
          {(hasVariant($state, "slotContent", "wager") ? false : true)
            ? renderPlasmicSlot({
                defaultContents: null,
                value: args.incorrectReasoning2
              })
            : null}
          {(
            hasVariant($state, "slotContent", "wager") &&
            hasVariant($state, "design", "finalOne")
              ? true
              : hasVariant($state, "slotContent", "wager")
                ? true
                : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___8Gog5, {
                [sty.freeBoxdesign_finalOne___8Gog5Gw30Z]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.freeBoxdesign_finalOne_slotContent_wager___8Gog5Gw30ZWFdBj]:
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne"),
                [sty.freeBoxslotContent_wager___8Gog5WFdBj]: hasVariant(
                  $state,
                  "slotContent",
                  "wager"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aE3Fw,
                  {
                    [sty.textslotContent_wager__aE3FWwFdBj]: hasVariant(
                      $state,
                      "slotContent",
                      "wager"
                    )
                  }
                )}
              >
                {hasVariant($state, "slotContent", "wager")
                  ? "How confident are you? "
                  : "Enter some text"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__auNdR,
                  {
                    [sty.textslotContent_wager__auNdRwFdBj]: hasVariant(
                      $state,
                      "slotContent",
                      "wager"
                    )
                  }
                )}
              >
                {hasVariant($state, "slotContent", "wager")
                  ? "How many points would you like to wager? "
                  : "Enter some text"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y5Tw,
                  {
                    [sty.textslotContent_wager__y5TwwFdBj]: hasVariant(
                      $state,
                      "slotContent",
                      "wager"
                    )
                  }
                )}
              >
                {hasVariant($state, "slotContent", "wager")
                  ? "Select your confidence level"
                  : "Enter some text"}
              </div>
              {(
                hasVariant($state, "slotContent", "wager")
                  ? true
                  : hasVariant($state, "active", "active")
                    ? false
                    : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__k6Go, {
                    [sty.freeBoxactive__k6GoDygov]: hasVariant(
                      $state,
                      "active",
                      "active"
                    ),
                    [sty.freeBoxslotContent_wager__k6GoWFdBj]: hasVariant(
                      $state,
                      "slotContent",
                      "wager"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__u4T7N, {
                      [sty.freeBoxslotContent_wager__u4T7NwFdBj]: hasVariant(
                        $state,
                        "slotContent",
                        "wager"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWager"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["wager"]
                              },
                              operation: 0,
                              value: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWager"] != null &&
                        typeof $steps["updateWager"] === "object" &&
                        typeof $steps["updateWager"].then === "function"
                      ) {
                        $steps["updateWager"] = await $steps["updateWager"];
                      }
                    }}
                  >
                    <WagerCard
                      active={(() => {
                        try {
                          return $state.wager == 3;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.wagerCard___1QuiU,
                        {
                          [sty.wagerCardactive___1QuiUDygov]: hasVariant(
                            $state,
                            "active",
                            "active"
                          ),
                          [sty.wagerCardslotContent_wager___1QuiUwFdBj]:
                            hasVariant($state, "slotContent", "wager")
                        }
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tUtaZ, {
                      [sty.freeBoxslotContent_wager__tUtaZwFdBj]: hasVariant(
                        $state,
                        "slotContent",
                        "wager"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWager"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["wager"]
                              },
                              operation: 0,
                              value: 7
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWager"] != null &&
                        typeof $steps["updateWager"] === "object" &&
                        typeof $steps["updateWager"].then === "function"
                      ) {
                        $steps["updateWager"] = await $steps["updateWager"];
                      }
                    }}
                  >
                    <WagerCard
                      active={(() => {
                        try {
                          return $state.wager == 7;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      amount={
                        hasVariant($state, "slotContent", "wager")
                          ? "_7"
                          : undefined
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.wagerCard__nf5Ex,
                        {
                          [sty.wagerCardslotContent_wager__nf5EXwFdBj]:
                            hasVariant($state, "slotContent", "wager")
                        }
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qrqEj, {
                      [sty.freeBoxslotContent_wager__qrqEjwFdBj]: hasVariant(
                        $state,
                        "slotContent",
                        "wager"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWager"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["wager"]
                              },
                              operation: 0,
                              value: 10
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWager"] != null &&
                        typeof $steps["updateWager"] === "object" &&
                        typeof $steps["updateWager"].then === "function"
                      ) {
                        $steps["updateWager"] = await $steps["updateWager"];
                      }
                    }}
                  >
                    <WagerCard
                      active={(() => {
                        try {
                          return $state.wager == 10;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      amount={
                        hasVariant($state, "slotContent", "wager")
                          ? "_10"
                          : undefined
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.wagerCard__nfVll,
                        {
                          [sty.wagerCardslotContent_wager__nfVllwFdBj]:
                            hasVariant($state, "slotContent", "wager")
                        }
                      )}
                    />
                  </div>
                </div>
              ) : null}
              <InfographEdButton
                className={classNames(
                  "__wab_instance",
                  sty.infographEdButton__sEukD,
                  {
                    [sty.infographEdButtonslotContent_wager__sEukDwFdBj]:
                      hasVariant($state, "slotContent", "wager")
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsSubmitted"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isSubmitted"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsSubmitted"] != null &&
                    typeof $steps["updateIsSubmitted"] === "object" &&
                    typeof $steps["updateIsSubmitted"].then === "function"
                  ) {
                    $steps["updateIsSubmitted"] =
                      await $steps["updateIsSubmitted"];
                  }
                }}
                onClickSubmit={args.onClickSubmit}
              />
            </div>
          ) : null}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___3Z9Fa, {
          [sty.freeBoxactive___3Z9FaDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxdesign_finalOne___3Z9Fagw30Z]: hasVariant(
            $state,
            "design",
            "finalOne"
          ),
          [sty.freeBoxreasoning_question1___3Z9FAs50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          )
        })}
      >
        <svg
          className={classNames(projectcss.all, sty.svg__qolfN, {
            [sty.svgactive__qolfNDygov]: hasVariant($state, "active", "active"),
            [sty.svgdesign_finalOne__qolfNgw30Z]: hasVariant(
              $state,
              "design",
              "finalOne"
            )
          })}
          role={"img"}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__bbt7, {
            [sty.freeBoxactive__bbt7Dygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxdesign_finalOne__bbt7Gw30Z]: hasVariant(
              $state,
              "design",
              "finalOne"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iGSc,
              {
                [sty.textactive__iGScDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.textdesign_finalOne__iGScGw30Z]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                )
              }
            )}
          >
            {hasVariant($state, "design", "finalOne") ? (
              "Question 1 of 4:"
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $state.selectedOptionId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0X9U7,
              {
                [sty.textactive___0X9U7Dygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.textdesign_finalOne___0X9U7Gw30Z]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.textreasoning_question1___0X9U7S50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              }
            )}
          >
            {hasVariant($state, "design", "finalOne") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.finalQuestion;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.correctAnswer;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__xVeT, {
          [sty.freeBoxactive__xVeTDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxdesign_finalOne__xVeTgw30Z]: hasVariant(
            $state,
            "design",
            "finalOne"
          ),
          [sty.freeBoxreasoning_question1__xVeTs50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__py71H, {
            [sty.freeBoxactive__py71HDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxreasoning_question1__py71Hs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nyb5)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u7Jx5
              )}
            >
              {"Select the best answer"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__g3R52, {
              [sty.freeBoxdesign_finalOne__g3R52Gw30Z]: hasVariant(
                $state,
                "design",
                "finalOne"
              ),
              [sty.freeBoxreasoning_question1__g3R52S50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <AnswerButton
              data-plasmic-name={"a2"}
              data-plasmic-override={overrides.a2}
              className={classNames("__wab_instance", sty.a2, {
                [sty.a2active]: hasVariant($state, "active", "active"),
                [sty.a2design_finalOne]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.a2design_finalOne_slotContent_wager]:
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne"),
                [sty.a2reasoning_question1]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              correct={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "A" &&
                          $props.correctAnswer === "A"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              incorrect={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "A" &&
                          $props.correctAnswer !== "A"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              onClick={args.onClickA}
              selected={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          !$props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "A"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.isSelected == "A";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerA;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={
                hasVariant($state, "design", "finalOne") ? "final" : undefined
              }
            />

            <AnswerButton
              data-plasmic-name={"b2"}
              data-plasmic-override={overrides.b2}
              answerState={
                hasVariant($state, "reasoning", "question1")
                  ? "correct"
                  : undefined
              }
              className={classNames("__wab_instance", sty.b2, {
                [sty.b2active]: hasVariant($state, "active", "active"),
                [sty.b2design_finalOne]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.b2design_finalOne_slotContent_wager]:
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne"),
                [sty.b2reasoning_question1]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              correct={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "B" &&
                          $props.correctAnswer === "B"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              incorrect={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "B" &&
                          $props.correctAnswer !== "B"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              onClick={args.onClickB}
              selected={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          !$props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "B"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.isSelected == "B";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerB;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={
                hasVariant($state, "design", "finalOne") ? "final" : undefined
              }
            >
              {"B"}
            </AnswerButton>
            <AnswerButton
              data-plasmic-name={"c2"}
              data-plasmic-override={overrides.c2}
              className={classNames("__wab_instance", sty.c2, {
                [sty.c2active]: hasVariant($state, "active", "active"),
                [sty.c2design_finalOne]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.c2design_finalOne_slotContent_wager]:
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne")
              })}
              correct={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "C" &&
                          $props.correctAnswer === "C"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              incorrect={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "C" &&
                          $props.correctAnswer !== "C"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              onClick={args.onClickC}
              selected={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          !$props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "C"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.isSelected == "C";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerC;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={
                hasVariant($state, "design", "finalOne") ? "final" : undefined
              }
            >
              {"C"}
            </AnswerButton>
            <AnswerButton
              data-plasmic-name={"d2"}
              data-plasmic-override={overrides.d2}
              className={classNames("__wab_instance", sty.d2, {
                [sty.d2design_finalOne]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.d2design_finalOne_slotContent_wager]:
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne")
              })}
              correct={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "D" &&
                          $props.correctAnswer === "D"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              incorrect={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          $props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "D" &&
                          $props.correctAnswer !== "D"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              onClick={args.onClickD}
              selected={
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne")
                  ? (() => {
                      try {
                        return (
                          !$props.controlledIsSubmitted &&
                          $props.controlledSelectedOptionId === "D"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.isSelected == "D";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e8IH
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.answerD;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return " ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              style2={
                hasVariant($state, "design", "finalOne") ? "final" : undefined
              }
            >
              {"D"}
            </AnswerButton>
            {(
              hasVariant($state, "active", "active")
                ? (() => {
                    try {
                      return !!$state.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__nIiSg, {
                  [sty.freeBoxactive__nIiSgDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.freeBoxdesign_finalOne__nIiSgGw30Z]: hasVariant(
                    $state,
                    "design",
                    "finalOne"
                  )
                })}
              >
                <InfographEdButton
                  className={classNames(
                    "__wab_instance",
                    sty.infographEdButton__hnm0R,
                    {
                      [sty.infographEdButtondesign_finalOne__hnm0Rgw30Z]:
                        hasVariant($state, "design", "finalOne")
                    }
                  )}
                >
                  {hasVariant($state, "design", "finalOne") ? "back" : "Submit"}
                </InfographEdButton>
                <div className={classNames(projectcss.all, sty.freeBox__cBc8A)}>
                  <InfographEdButton
                    className={classNames(
                      "__wab_instance",
                      sty.infographEdButton__qhyiO,
                      {
                        [sty.infographEdButtondesign_finalOne_slotContent_wager__qhyiOgw30ZWFdBj]:
                          hasVariant($state, "slotContent", "wager") &&
                          hasVariant($state, "design", "finalOne")
                      }
                    )}
                    onClick={args.onClickContinue}
                  >
                    {"continue"}
                  </InfographEdButton>
                </div>
              </div>
            ) : null}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___4AkhO, {
            [sty.freeBoxdesign_finalOne_slotContent_wager___4AkhOgw30ZWFdBj]:
              hasVariant($state, "slotContent", "wager") &&
              hasVariant($state, "design", "finalOne"),
            [sty.freeBoxreasoning_question1___4AkhOs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__wZ1CY, {
              [sty.freeBoxactive__wZ1CYDygov]: hasVariant(
                $state,
                "active",
                "active"
              ),
              [sty.freeBoxdesign_finalOne__wZ1CYgw30Z]: hasVariant(
                $state,
                "design",
                "finalOne"
              ),
              [sty.freeBoxdesign_finalOne_slotContent_wager__wZ1CYgw30ZWFdBj]:
                hasVariant($state, "slotContent", "wager") &&
                hasVariant($state, "design", "finalOne"),
              [sty.freeBoxreasoning_question1__wZ1CYs50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__hMaTq, {
                [sty.freeBoxactive__hMaTqDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.freeBoxdesign_finalOne__hMaTqGw30Z]: hasVariant(
                  $state,
                  "design",
                  "finalOne"
                ),
                [sty.freeBoxreasoning_question1__hMaTqs50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                ),
                [sty.freeBoxslotContent_wager__hMaTqwFdBj]: hasVariant(
                  $state,
                  "slotContent",
                  "wager"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___4K6Rh, {
                  [sty.freeBoxdesign_finalOne_slotContent_wager___4K6RhGw30ZWFdBj]:
                    hasVariant($state, "slotContent", "wager") &&
                    hasVariant($state, "design", "finalOne"),
                  [sty.freeBoxreasoning_question1___4K6Rhs50Um]: hasVariant(
                    $state,
                    "reasoning",
                    "question1"
                  )
                })}
              >
                {(hasVariant($state, "slotContent", "wager") ? false : true)
                  ? renderPlasmicSlot({
                      defaultContents: null,
                      value: args.correctReasoning,
                      className: classNames(sty.slotTargetCorrectReasoning, {
                        [sty.slotTargetCorrectReasoningreasoning_question1]:
                          hasVariant($state, "reasoning", "question1"),
                        [sty.slotTargetCorrectReasoningslotContent_wager]:
                          hasVariant($state, "slotContent", "wager")
                      })
                    })
                  : null}
                {(hasVariant($state, "slotContent", "wager") ? false : true)
                  ? renderPlasmicSlot({
                      defaultContents: null,
                      value: args.incorrectReasoning
                    })
                  : null}
                {(
                  hasVariant($state, "slotContent", "wager") &&
                  hasVariant($state, "design", "finalOne")
                    ? true
                    : hasVariant($state, "slotContent", "wager")
                      ? true
                      : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__n2Fl, {
                      [sty.freeBoxdesign_finalOne__n2FlGw30Z]: hasVariant(
                        $state,
                        "design",
                        "finalOne"
                      ),
                      [sty.freeBoxdesign_finalOne_slotContent_wager__n2FlGw30ZWFdBj]:
                        hasVariant($state, "slotContent", "wager") &&
                        hasVariant($state, "design", "finalOne"),
                      [sty.freeBoxslotContent_wager__n2FlwFdBj]: hasVariant(
                        $state,
                        "slotContent",
                        "wager"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eteMu,
                        {
                          [sty.textslotContent_wager__eteMuwFdBj]: hasVariant(
                            $state,
                            "slotContent",
                            "wager"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "slotContent", "wager")
                        ? "How confident are you? "
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ghDwU,
                        {
                          [sty.textslotContent_wager__ghDwUwFdBj]: hasVariant(
                            $state,
                            "slotContent",
                            "wager"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "slotContent", "wager")
                        ? "How many points would you like to wager? "
                        : "Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rCwc1,
                        {
                          [sty.textslotContent_wager__rCwc1WFdBj]: hasVariant(
                            $state,
                            "slotContent",
                            "wager"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "slotContent", "wager")
                        ? "Select your confidence level"
                        : "Enter some text"}
                    </div>
                    {(
                      hasVariant($state, "slotContent", "wager")
                        ? true
                        : hasVariant($state, "active", "active")
                          ? false
                          : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Eivr,
                          {
                            [sty.freeBoxactive___7EivrDygov]: hasVariant(
                              $state,
                              "active",
                              "active"
                            ),
                            [sty.freeBoxslotContent_wager___7EivrwFdBj]:
                              hasVariant($state, "slotContent", "wager")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cQsAn,
                            {
                              [sty.freeBoxslotContent_wager__cQsANwFdBj]:
                                hasVariant($state, "slotContent", "wager")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWager"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["wager"]
                                    },
                                    operation: 0,
                                    value: 3
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWager"] != null &&
                              typeof $steps["updateWager"] === "object" &&
                              typeof $steps["updateWager"].then === "function"
                            ) {
                              $steps["updateWager"] =
                                await $steps["updateWager"];
                            }
                          }}
                        >
                          <WagerCard
                            data-plasmic-name={"lessConfident"}
                            data-plasmic-override={overrides.lessConfident}
                            active={(() => {
                              try {
                                return $state.wager == 3;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.lessConfident,
                              {
                                [sty.lessConfidentactive]: hasVariant(
                                  $state,
                                  "active",
                                  "active"
                                ),
                                [sty.lessConfidentslotContent_wager]:
                                  hasVariant($state, "slotContent", "wager")
                              }
                            )}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n8Rua,
                            {
                              [sty.freeBoxslotContent_wager__n8RuawFdBj]:
                                hasVariant($state, "slotContent", "wager")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWager"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["wager"]
                                    },
                                    operation: 0,
                                    value: 7
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWager"] != null &&
                              typeof $steps["updateWager"] === "object" &&
                              typeof $steps["updateWager"].then === "function"
                            ) {
                              $steps["updateWager"] =
                                await $steps["updateWager"];
                            }
                          }}
                        >
                          <WagerCard
                            data-plasmic-name={"confident"}
                            data-plasmic-override={overrides.confident}
                            active={(() => {
                              try {
                                return $state.wager == 7;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            amount={
                              hasVariant($state, "slotContent", "wager")
                                ? "_7"
                                : undefined
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.confident,
                              {
                                [sty.confidentslotContent_wager]: hasVariant(
                                  $state,
                                  "slotContent",
                                  "wager"
                                )
                              }
                            )}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g31II,
                            {
                              [sty.freeBoxslotContent_wager__g31IIwFdBj]:
                                hasVariant($state, "slotContent", "wager")
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWager"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["wager"]
                                    },
                                    operation: 0,
                                    value: 10
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWager"] != null &&
                              typeof $steps["updateWager"] === "object" &&
                              typeof $steps["updateWager"].then === "function"
                            ) {
                              $steps["updateWager"] =
                                await $steps["updateWager"];
                            }
                          }}
                        >
                          <WagerCard
                            data-plasmic-name={"veryConfident"}
                            data-plasmic-override={overrides.veryConfident}
                            active={(() => {
                              try {
                                return $state.wager == 10;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            amount={
                              hasVariant($state, "slotContent", "wager")
                                ? "_10"
                                : undefined
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.veryConfident,
                              {
                                [sty.veryConfidentslotContent_wager]:
                                  hasVariant($state, "slotContent", "wager")
                              }
                            )}
                          />
                        </div>
                      </div>
                    ) : null}
                    <InfographEdButton
                      data-plasmic-name={"submit2"}
                      data-plasmic-override={overrides.submit2}
                      className={classNames("__wab_instance", sty.submit2, {
                        [sty.submit2slotContent_wager]: hasVariant(
                          $state,
                          "slotContent",
                          "wager"
                        )
                      })}
                      onClick={args.onClickSubmit}
                    />
                  </div>
                ) : null}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "a",
    "b",
    "c",
    "d",
    "submit",
    "a2",
    "b2",
    "c2",
    "d2",
    "lessConfident",
    "confident",
    "veryConfident",
    "submit2"
  ],
  img: ["img"],
  a: ["a"],
  b: ["b"],
  c: ["c"],
  d: ["d"],
  submit: ["submit"],
  a2: ["a2"],
  b2: ["b2"],
  c2: ["c2"],
  d2: ["d2"],
  lessConfident: ["lessConfident"],
  confident: ["confident"],
  veryConfident: ["veryConfident"],
  submit2: ["submit2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  a: typeof AnswerButton;
  b: typeof AnswerButton;
  c: typeof AnswerButton;
  d: typeof AnswerButton;
  submit: typeof InfographEdButton;
  a2: typeof AnswerButton;
  b2: typeof AnswerButton;
  c2: typeof AnswerButton;
  d2: typeof AnswerButton;
  lessConfident: typeof WagerCard;
  confident: typeof WagerCard;
  veryConfident: typeof WagerCard;
  submit2: typeof InfographEdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestionModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestionModal__VariantsArgs;
    args?: PlasmicQuestionModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicQuestionModal__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicQuestionModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionModal__ArgProps,
          internalVariantPropNames: PlasmicQuestionModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionModal";
  } else {
    func.displayName = `PlasmicQuestionModal.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionModal = Object.assign(
  // Top-level PlasmicQuestionModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    a: makeNodeComponent("a"),
    b: makeNodeComponent("b"),
    c: makeNodeComponent("c"),
    d: makeNodeComponent("d"),
    submit: makeNodeComponent("submit"),
    a2: makeNodeComponent("a2"),
    b2: makeNodeComponent("b2"),
    c2: makeNodeComponent("c2"),
    d2: makeNodeComponent("d2"),
    lessConfident: makeNodeComponent("lessConfident"),
    confident: makeNodeComponent("confident"),
    veryConfident: makeNodeComponent("veryConfident"),
    submit2: makeNodeComponent("submit2"),

    // Metadata about props expected for PlasmicQuestionModal
    internalVariantProps: PlasmicQuestionModal__VariantProps,
    internalArgProps: PlasmicQuestionModal__ArgProps
  }
);

export default PlasmicQuestionModal;
/* prettier-ignore-end */
