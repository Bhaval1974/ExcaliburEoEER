/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: k8q3s-VwBO0i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AnswerButton from "../../AnswerButton"; // plasmic-import: AxrUA-GaPp8F/component
import InfographEdButton from "../../InfographEdButton"; // plasmic-import: TjjevRS570P0/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicQuestionModal.module.css"; // plasmic-import: k8q3s-VwBO0i/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 3DFQxdCHWfpb/icon

createPlasmicElementProxy;

export type PlasmicQuestionModal__VariantMembers = {
  active: "active";
  reasoning: "question1";
  type: "final";
};
export type PlasmicQuestionModal__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  reasoning?: SingleChoiceArg<"question1">;
  type?: SingleChoiceArg<"final">;
};
type VariantPropType = keyof PlasmicQuestionModal__VariantsArgs;
export const PlasmicQuestionModal__VariantProps = new Array<VariantPropType>(
  "active",
  "reasoning",
  "type"
);

export type PlasmicQuestionModal__ArgsType = {
  onClickClose?: (event: any) => void;
  onClickSubmit?: (event: any) => void;
  questionId?: string;
  questions?: any;
  question?: string;
  answerA?: string;
  answerB?: string;
  answerC?: string;
  answerD?: string;
  correctReasoning?: React.ReactNode;
  incorrectReasoning?: React.ReactNode;
};
type ArgPropType = keyof PlasmicQuestionModal__ArgsType;
export const PlasmicQuestionModal__ArgProps = new Array<ArgPropType>(
  "onClickClose",
  "onClickSubmit",
  "questionId",
  "questions",
  "question",
  "answerA",
  "answerB",
  "answerC",
  "answerD",
  "correctReasoning",
  "incorrectReasoning"
);

export type PlasmicQuestionModal__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  infographEdButton?: Flex__<typeof InfographEdButton>;
};

export interface DefaultQuestionModalProps {
  onClickClose?: (event: any) => void;
  onClickSubmit?: (event: any) => void;
  questionId?: string;
  questions?: any;
  question?: string;
  answerA?: string;
  answerB?: string;
  answerC?: string;
  answerD?: string;
  correctReasoning?: React.ReactNode;
  incorrectReasoning?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  reasoning?: SingleChoiceArg<"question1">;
  type?: SingleChoiceArg<"final">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestionModal__RenderFunc(props: {
  variants: PlasmicQuestionModal__VariantsArgs;
  args: PlasmicQuestionModal__ArgsType;
  overrides: PlasmicQuestionModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          questions: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "isSelected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reasoning",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.reasoning
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.rootreasoning_question1]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.roottype_final]: hasVariant($state, "type", "final")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__tk1B7, {
          [sty.freeBoxactive__tk1B7Dygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxreasoning_question1__tk1B7S50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.freeBoxtype_final__tk1B7Gw30Z]: hasVariant(
            $state,
            "type",
            "final"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ajtzg
          )}
        >
          {"RETURN TO THE EXAM ROOM"}
        </div>
        <IconIcon
          className={classNames(projectcss.all, sty.svg__nQkgD)}
          onClick={args.onClickClose}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__hsUfh, {
          [sty.freeBoxactive__hsUfhDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxtype_final__hsUfhGw30Z]: hasVariant(
            $state,
            "type",
            "final"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__omsVe, {
            [sty.freeBoxactive__omsVeDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxtype_final__omsVeGw30Z]: hasVariant(
              $state,
              "type",
              "final"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgactive]: hasVariant($state, "active", "active")
            })}
            displayHeight={"100px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/escape_room/images/hotspotQuestionSvg.svg",
              fullWidth: 102,
              fullHeight: 102,
              aspectRatio: 1
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__p2MCz
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.question;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return " ";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___7WXd3, {
          [sty.freeBoxactive___7WXd3Dygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxreasoning_question1___7WXd3S50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.freeBoxtype_final___7WXd3Gw30Z]: hasVariant(
            $state,
            "type",
            "final"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pppAk, {
            [sty.freeBoxactive__pppAkDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxreasoning_question1__pppAks50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uWe0W)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wqVwQ,
                {
                  [sty.textactive__wqVwQDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  )
                }
              )}
            >
              {"Select the best answer"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__yAUk2, {
              [sty.freeBoxreasoning_question1__yAUk2S50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              ),
              [sty.freeBoxtype_final__yAUk2Gw30Z]: hasVariant(
                $state,
                "type",
                "final"
              )
            })}
          >
            <AnswerButton
              className={classNames("__wab_instance", sty.answerButton__arD1F, {
                [sty.answerButtonactive__arD1FDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.answerButtonreasoning_question1__arD1Fs50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                ),
                [sty.answerButtontype_final__arD1FGw30Z]: hasVariant(
                  $state,
                  "type",
                  "final"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "A"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "A";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerA;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            />

            <AnswerButton
              answerState={
                hasVariant($state, "reasoning", "question1")
                  ? "correct"
                  : undefined
              }
              className={classNames("__wab_instance", sty.answerButton__cuFvl, {
                [sty.answerButtonactive__cuFvlDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.answerButtonreasoning_question1__cuFvls50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "B"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "B";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerB;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            >
              {"B"}
            </AnswerButton>
            <AnswerButton
              className={classNames("__wab_instance", sty.answerButton__iMZm, {
                [sty.answerButtonactive__iMZmDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "C"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "C";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerC;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
            >
              {"C"}
            </AnswerButton>
            <AnswerButton
              className={classNames("__wab_instance", sty.answerButton__gWiOe, {
                [sty.answerButtonreasoning_question1__gWiOes50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "D"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "D";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lqEw5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.answerD;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return " ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
            >
              {"D"}
            </AnswerButton>
            {(
              hasVariant($state, "active", "active")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <InfographEdButton
                data-plasmic-name={"infographEdButton"}
                data-plasmic-override={overrides.infographEdButton}
                active={
                  hasVariant($state, "active", "active") ? true : undefined
                }
                className={classNames("__wab_instance", sty.infographEdButton, {
                  [sty.infographEdButtonactive]: hasVariant(
                    $state,
                    "active",
                    "active"
                  )
                })}
                isSelected={$state.isSelected}
                onClickSubmit={args.onClickSubmit}
              />
            ) : null}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__wZ1CY, {
            [sty.freeBoxactive__wZ1CYDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxreasoning_question1__wZ1CYs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__hMaTq, {
              [sty.freeBoxactive__hMaTqDygov]: hasVariant(
                $state,
                "active",
                "active"
              ),
              [sty.freeBoxreasoning_question1__hMaTqs50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              ),
              [sty.freeBoxtype_final__hMaTqGw30Z]: hasVariant(
                $state,
                "type",
                "final"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___4K6Rh, {
                [sty.freeBoxreasoning_question1___4K6Rhs50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.correctReasoning,
                className: classNames(sty.slotTargetCorrectReasoning, {
                  [sty.slotTargetCorrectReasoningreasoning_question1]:
                    hasVariant($state, "reasoning", "question1")
                })
              })}
              {renderPlasmicSlot({
                defaultContents: null,
                value: args.incorrectReasoning
              })}
            </div>
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox___3Z9Fa, {
          [sty.freeBoxactive___3Z9FaDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxreasoning_question1___3Z9FAs50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.freeBoxtype_final___3Z9Fagw30Z]: hasVariant(
            $state,
            "type",
            "final"
          )
        })}
      >
        <svg
          className={classNames(projectcss.all, sty.svg__qolfN, {
            [sty.svgactive__qolfNDygov]: hasVariant($state, "active", "active"),
            [sty.svgtype_final__qolfNgw30Z]: hasVariant($state, "type", "final")
          })}
          role={"img"}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__bbt7, {
            [sty.freeBoxtype_final__bbt7Gw30Z]: hasVariant(
              $state,
              "type",
              "final"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iGSc,
              {
                [sty.texttype_final__iGScGw30Z]: hasVariant(
                  $state,
                  "type",
                  "final"
                )
              }
            )}
          >
            {hasVariant($state, "type", "final")
              ? "Question 1 of 4:"
              : "Enter some text"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0X9U7,
              {
                [sty.textreasoning_question1___0X9U7S50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                ),
                [sty.texttype_final___0X9U7Gw30Z]: hasVariant(
                  $state,
                  "type",
                  "final"
                )
              }
            )}
          >
            {hasVariant($state, "type", "final") ? (
              <React.Fragment>
                <React.Fragment>
                  {
                    "After making the diagnosis of EoE, you initially suggest a food elimination trial to identify triggers for Kelvin's disease. However, Kelvin's parents are concerned that this will be a challenge given his feeding difficulties. "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "var(--token-zjmk6VW4FHVN)" }}
                >
                  {"What is the best approach to manage this issue? "}
                </span>
              </React.Fragment>
            ) : (
              "Enter some text"
            )}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__xVeT, {
          [sty.freeBoxactive__xVeTDygov]: hasVariant(
            $state,
            "active",
            "active"
          ),
          [sty.freeBoxreasoning_question1__xVeTs50Um]: hasVariant(
            $state,
            "reasoning",
            "question1"
          ),
          [sty.freeBoxtype_final__xVeTgw30Z]: hasVariant(
            $state,
            "type",
            "final"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__py71H, {
            [sty.freeBoxactive__py71HDygov]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.freeBoxreasoning_question1__py71Hs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nyb5)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u7Jx5
              )}
            >
              {"Select the best answer"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__g3R52, {
              [sty.freeBoxreasoning_question1__g3R52S50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <AnswerButton
              className={classNames(
                "__wab_instance",
                sty.answerButton___3GZwW,
                {
                  [sty.answerButtonactive___3GZwWDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.answerButtonreasoning_question1___3GZwWs50Um]:
                    hasVariant($state, "reasoning", "question1"),
                  [sty.answerButtontype_final___3GZwWgw30Z]: hasVariant(
                    $state,
                    "type",
                    "final"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "A"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "A";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerA;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={hasVariant($state, "type", "final") ? "final" : undefined}
            />

            <AnswerButton
              answerState={
                hasVariant($state, "reasoning", "question1")
                  ? "correct"
                  : undefined
              }
              className={classNames("__wab_instance", sty.answerButton__bJ4Dg, {
                [sty.answerButtonactive__bJ4DgDygov]: hasVariant(
                  $state,
                  "active",
                  "active"
                ),
                [sty.answerButtonreasoning_question1__bJ4Dgs50Um]: hasVariant(
                  $state,
                  "reasoning",
                  "question1"
                ),
                [sty.answerButtontype_final__bJ4DgGw30Z]: hasVariant(
                  $state,
                  "type",
                  "final"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "B"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "B";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerB;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={hasVariant($state, "type", "final") ? "final" : undefined}
            >
              {"B"}
            </AnswerButton>
            <AnswerButton
              className={classNames(
                "__wab_instance",
                sty.answerButton___99Mo5,
                {
                  [sty.answerButtonactive___99Mo5Dygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.answerButtontype_final___99Mo5Gw30Z]: hasVariant(
                    $state,
                    "type",
                    "final"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "C"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "C";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.answerC;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return " ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              }
              style2={hasVariant($state, "type", "final") ? "final" : undefined}
            >
              {"C"}
            </AnswerButton>
            <AnswerButton
              className={classNames("__wab_instance", sty.answerButton__xKgj, {
                [sty.answerButtontype_final__xKgjgw30Z]: hasVariant(
                  $state,
                  "type",
                  "final"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsSelected"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isSelected"]
                        },
                        operation: 0,
                        value: "D"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsSelected"] != null &&
                  typeof $steps["updateIsSelected"] === "object" &&
                  typeof $steps["updateIsSelected"].then === "function"
                ) {
                  $steps["updateIsSelected"] = await $steps["updateIsSelected"];
                }
              }}
              selected={(() => {
                try {
                  return $state.isSelected == "D";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e8IH
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.answerD;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return " ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              }
              style2={hasVariant($state, "type", "final") ? "final" : undefined}
            >
              {"D"}
            </AnswerButton>
            {(
              hasVariant($state, "active", "active")
                ? (() => {
                    try {
                      return !!$state.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__nIiSg, {
                  [sty.freeBoxactive__nIiSgDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.freeBoxtype_final__nIiSgGw30Z]: hasVariant(
                    $state,
                    "type",
                    "final"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__au2Cg,
                    {
                      [sty.textactive__au2CgDygov]: hasVariant(
                        $state,
                        "active",
                        "active"
                      ),
                      [sty.texttype_final__au2CgGw30Z]: hasVariant(
                        $state,
                        "type",
                        "final"
                      )
                    }
                  )}
                  onClick={args.onClickSubmit}
                >
                  {hasVariant($state, "type", "final") ? "Back" : "Submit"}
                </div>
              </div>
            ) : null}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___4AkhO, {
            [sty.freeBoxreasoning_question1___4AkhOs50Um]: hasVariant(
              $state,
              "reasoning",
              "question1"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__yBEaF, {
              [sty.freeBoxreasoning_question1__yBEaFs50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hgHlk,
                {
                  [sty.textactive__hgHlkDygov]: hasVariant(
                    $state,
                    "active",
                    "active"
                  ),
                  [sty.textreasoning_question1__hgHlKs50Um]: hasVariant(
                    $state,
                    "reasoning",
                    "question1"
                  )
                }
              )}
            >
              {hasVariant($state, "reasoning", "question1")
                ? "Correct answer: B"
                : "Enter some text"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__oupbr, {
              [sty.freeBoxreasoning_question1__oupbrs50Um]: hasVariant(
                $state,
                "reasoning",
                "question1"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Fxji,
                {
                  [sty.textreasoning_question1___3FxjIs50Um]: hasVariant(
                    $state,
                    "reasoning",
                    "question1"
                  )
                }
              )}
            >
              {hasVariant($state, "reasoning", "question1")
                ? "Studies have found that these factors have a higher risk of developing EoE: "
                : "Enter some text"}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "infographEdButton"],
  img: ["img"],
  infographEdButton: ["infographEdButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  infographEdButton: typeof InfographEdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestionModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestionModal__VariantsArgs;
    args?: PlasmicQuestionModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicQuestionModal__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicQuestionModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionModal__ArgProps,
          internalVariantPropNames: PlasmicQuestionModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionModal";
  } else {
    func.displayName = `PlasmicQuestionModal.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestionModal = Object.assign(
  // Top-level PlasmicQuestionModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    infographEdButton: makeNodeComponent("infographEdButton"),

    // Metadata about props expected for PlasmicQuestionModal
    internalVariantProps: PlasmicQuestionModal__VariantProps,
    internalArgProps: PlasmicQuestionModal__ArgProps
  }
);

export default PlasmicQuestionModal;
/* prettier-ignore-end */
