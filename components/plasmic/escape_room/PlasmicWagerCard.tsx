/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: w_DAzjAsMVHz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicWagerCard.module.css"; // plasmic-import: w_DAzjAsMVHz/css

createPlasmicElementProxy;

export type PlasmicWagerCard__VariantMembers = {
  active: "active";
  amount: "_3" | "_7" | "_10";
};
export type PlasmicWagerCard__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  amount?: SingleChoiceArg<"_3" | "_7" | "_10">;
};
type VariantPropType = keyof PlasmicWagerCard__VariantsArgs;
export const PlasmicWagerCard__VariantProps = new Array<VariantPropType>(
  "active",
  "amount"
);

export type PlasmicWagerCard__ArgsType = {};
type ArgPropType = keyof PlasmicWagerCard__ArgsType;
export const PlasmicWagerCard__ArgProps = new Array<ArgPropType>();

export type PlasmicWagerCard__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultWagerCardProps {
  active?: SingleBooleanChoiceArg<"active">;
  amount?: SingleChoiceArg<"_3" | "_7" | "_10">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWagerCard__RenderFunc(props: {
  variants: PlasmicWagerCard__VariantsArgs;
  args: PlasmicWagerCard__ArgsType;
  overrides: PlasmicWagerCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "amount",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.amount
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootactive]: hasVariant($state, "active", "active"),
          [sty.rootamount__10]: hasVariant($state, "amount", "_10"),
          [sty.rootamount__3]: hasVariant($state, "amount", "_3"),
          [sty.rootamount__7]: hasVariant($state, "amount", "_7")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__u0Jru,
            {
              [sty.textactive__u0JruT5G1V]: hasVariant(
                $state,
                "active",
                "active"
              ),
              [sty.textamount__10__u0Jru9HkcF]: hasVariant(
                $state,
                "amount",
                "_10"
              ),
              [sty.textamount__7__u0JrutAcOv]: hasVariant(
                $state,
                "amount",
                "_7"
              )
            }
          )}
        >
          {hasVariant($state, "amount", "_10")
            ? "Very confident"
            : hasVariant($state, "amount", "_7")
              ? "Confident"
              : "Less confident"}
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__sdvxQ,
          {
            [sty.textactive__sdvxQt5G1V]: hasVariant(
              $state,
              "active",
              "active"
            ),
            [sty.textamount__10__sdvxQ9HkcF]: hasVariant(
              $state,
              "amount",
              "_10"
            ),
            [sty.textamount__3__sdvxQIxQJu]: hasVariant($state, "amount", "_3"),
            [sty.textamount__7__sdvxQtAcOv]: hasVariant($state, "amount", "_7")
          }
        )}
      >
        {hasVariant($state, "amount", "_10")
          ? "10"
          : hasVariant($state, "amount", "_7")
            ? "7"
            : "3"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWagerCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWagerCard__VariantsArgs;
    args?: PlasmicWagerCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicWagerCard__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicWagerCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWagerCard__ArgProps,
          internalVariantPropNames: PlasmicWagerCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWagerCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWagerCard";
  } else {
    func.displayName = `PlasmicWagerCard.${nodeName}`;
  }
  return func;
}

export const PlasmicWagerCard = Object.assign(
  // Top-level PlasmicWagerCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicWagerCard
    internalVariantProps: PlasmicWagerCard__VariantProps,
    internalArgProps: PlasmicWagerCard__ArgProps
  }
);

export default PlasmicWagerCard;
/* prettier-ignore-end */
