/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7WvC14QG9b5jXarkiBh2yY
// Component: Fhh6u1WI2G9i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7WvC14QG9b5jXarkiBh2yY/projectcss
import sty from "./PlasmicHotspot.module.css"; // plasmic-import: Fhh6u1WI2G9i/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: ZMoSd5dtyVZ7/icon
import Lock1SvgIcon from "./icons/PlasmicIcon__Lock1Svg"; // plasmic-import: w2AEEyZLPBdy/icon

createPlasmicElementProxy;

export type PlasmicHotspot__VariantMembers = {
  size: "_50Px";
  completed: "completed";
  locked: "locked";
};
export type PlasmicHotspot__VariantsArgs = {
  size?: SingleChoiceArg<"_50Px">;
  completed?: SingleBooleanChoiceArg<"completed">;
  locked?: SingleBooleanChoiceArg<"locked">;
};
type VariantPropType = keyof PlasmicHotspot__VariantsArgs;
export const PlasmicHotspot__VariantProps = new Array<VariantPropType>(
  "size",
  "completed",
  "locked"
);

export type PlasmicHotspot__ArgsType = { questionId?: string };
type ArgPropType = keyof PlasmicHotspot__ArgsType;
export const PlasmicHotspot__ArgProps = new Array<ArgPropType>("questionId");

export type PlasmicHotspot__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHotspotProps {
  questionId?: string;
  size?: SingleChoiceArg<"_50Px">;
  completed?: SingleBooleanChoiceArg<"completed">;
  locked?: SingleBooleanChoiceArg<"locked">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHotspot__RenderFunc(props: {
  variants: PlasmicHotspot__VariantsArgs;
  args: PlasmicHotspot__ArgsType;
  overrides: PlasmicHotspot__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "completed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.completed
      },
      {
        path: "locked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.locked
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootcompleted]: hasVariant($state, "completed", "completed"),
          [sty.rootlocked]: hasVariant($state, "locked", "locked"),
          [sty.rootsize__50Px]: hasVariant($state, "size", "_50Px"),
          [sty.rootsize__50Px_completed]:
            hasVariant($state, "size", "_50Px") &&
            hasVariant($state, "completed", "completed")
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateSize"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "size",
                operation: 0,
                value: "_50Px"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateSize"] != null &&
          typeof $steps["updateSize"] === "object" &&
          typeof $steps["updateSize"].then === "function"
        ) {
          $steps["updateSize"] = await $steps["updateSize"];
        }
      }}
    >
      {(
        hasVariant($state, "locked", "locked")
          ? true
          : hasVariant($state, "completed", "completed")
            ? false
            : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__iy2MK, {
            [sty.freeBoxcompleted__iy2MKkywwe]: hasVariant(
              $state,
              "completed",
              "completed"
            ),
            [sty.freeBoxlocked__iy2MKqTzol]: hasVariant(
              $state,
              "locked",
              "locked"
            ),
            [sty.freeBoxsize__50Px__iy2MKb1D4B]: hasVariant(
              $state,
              "size",
              "_50Px"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__kDhc8, {
              [sty.freeBoxsize__50Px__kDhc8B1D4B]: hasVariant(
                $state,
                "size",
                "_50Px"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__lPtod, {
                [sty.freeBoxlocked__lPtodqTzol]: hasVariant(
                  $state,
                  "locked",
                  "locked"
                ),
                [sty.freeBoxsize__50Px__lPtodb1D4B]: hasVariant(
                  $state,
                  "size",
                  "_50Px"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__zhdog, {
                  [sty.freeBoxcompleted__zhdogkywwe]: hasVariant(
                    $state,
                    "completed",
                    "completed"
                  ),
                  [sty.freeBoxlocked__zhdogQTzol]: hasVariant(
                    $state,
                    "locked",
                    "locked"
                  ),
                  [sty.freeBoxsize__50Px__zhdogB1D4B]: hasVariant(
                    $state,
                    "size",
                    "_50Px"
                  )
                })}
              />
            </div>
          </div>
        </div>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__nM0S0, {
          [sty.freeBoxcompleted__nM0S0Kywwe]: hasVariant(
            $state,
            "completed",
            "completed"
          ),
          [sty.freeBoxlocked__nM0S0QTzol]: hasVariant(
            $state,
            "locked",
            "locked"
          ),
          [sty.freeBoxsize__50Px_completed__nM0S0B1D4BKywwe]:
            hasVariant($state, "size", "_50Px") &&
            hasVariant($state, "completed", "completed")
        })}
      >
        <CheckSvgIcon
          className={classNames(projectcss.all, sty.svg__ghlcv, {
            [sty.svgcompleted__ghlcvkywwe]: hasVariant(
              $state,
              "completed",
              "completed"
            ),
            [sty.svglocked__ghlcvQTzol]: hasVariant($state, "locked", "locked"),
            [sty.svgsize__50Px_completed__ghlcvB1D4BKywwe]:
              hasVariant($state, "size", "_50Px") &&
              hasVariant($state, "completed", "completed")
          })}
          role={"img"}
        />
      </div>
      <Lock1SvgIcon
        className={classNames(projectcss.all, sty.svg__nSisR, {
          [sty.svglocked__nSisRqTzol]: hasVariant($state, "locked", "locked")
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHotspot__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHotspot__VariantsArgs;
    args?: PlasmicHotspot__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHotspot__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHotspot__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHotspot__ArgProps,
          internalVariantPropNames: PlasmicHotspot__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHotspot__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHotspot";
  } else {
    func.displayName = `PlasmicHotspot.${nodeName}`;
  }
  return func;
}

export const PlasmicHotspot = Object.assign(
  // Top-level PlasmicHotspot renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHotspot
    internalVariantProps: PlasmicHotspot__VariantProps,
    internalArgProps: PlasmicHotspot__ArgProps
  }
);

export default PlasmicHotspot;
/* prettier-ignore-end */
